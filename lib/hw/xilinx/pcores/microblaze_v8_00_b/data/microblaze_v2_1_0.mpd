#-- DISCLAIMER OF LIABILITY
#--
#-- This file contains proprietary and confidential information of
#-- Xilinx, Inc. ("Xilinx"), that is distributed under a license
#-- from Xilinx, and may be used, copied and/or disclosed only
#-- pursuant to the terms of a valid license agreement with Xilinx.
#--
#-- XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION
#-- ("MATERIALS") "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
#-- EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING WITHOUT
#-- LIMITATION, ANY WARRANTY WITH RESPECT TO NONINFRINGEMENT,
#-- MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. Xilinx
#-- does not warrant that functions included in the Materials will
#-- meet the requirements of Licensee, or that the operation of the
#-- Materials will be uninterrupted or error-free, or that defects
#-- in the Materials will be corrected. Furthermore, Xilinx does
#-- not warrant or make any representations regarding use, or the
#-- results of the use, of the Materials in terms of correctness,
#-- accuracy, reliability or otherwise.
#--
#-- Xilinx products are not designed or intended to be fail-safe,
#-- or for use in any application requiring fail-safe performance,
#-- such as life-support or safety devices or systems, Class III
#-- medical devices, nuclear facilities, applications related to
#-- the deployment of airbags, or any other applications that could
#-- lead to death, personal injury or severe property or
#-- environmental damage (individually and collectively, "critical
#-- applications"). Customer assumes the sole risk and liability
#-- of any use of Xilinx products in critical applications,
#-- subject only to applicable laws and regulations governing
#-- limitations on product liability.
#--
#-- Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
#--
#-- This disclaimer and copyright notice must be retained as part
#-- of this file at all times.
#--
###################################################################
##
## Name     : microblaze
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN microblaze

## Peripheral Options
OPTION IPTYPE = PROCESSOR
OPTION IMP_NETLIST = TRUE
OPTION STYLE = HDL
OPTION HDL = VHDL
OPTION RUN_NGCBUILD = TRUE
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION SYSLEVEL_DRC_PROC = check_syslevel_settings
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = generate_corelevel_ucf
OPTION SPECIAL = MICROBLAZE
OPTION DESC = MicroBlaze
OPTION LONG_DESC = The MicroBlaze 32 bit soft processor
OPTION IP_GROUP = Processor:MICROBLAZE


## Bus Interfaces
BUS_INTERFACE BUS = DLMB, BUS_STD = LMB, BUS_TYPE = MASTER, SHARES_ADDR = DPLB
BUS_INTERFACE BUS = ILMB, BUS_STD = LMB, BUS_TYPE = MASTER, SHARES_ADDR = IPLB
BUS_INTERFACE BUS = DPLB, BUS_STD = PLBV46, BUS_TYPE = MASTER, SHARES_ADDR = DLMB, ISVALID = (C_INTERCONNECT == 1)
BUS_INTERFACE BUS = IPLB, BUS_STD = PLBV46, BUS_TYPE = MASTER, SHARES_ADDR = ILMB, ISVALID = (C_INTERCONNECT == 1)
BUS_INTERFACE BUS = M_AXI_DP, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INTERCONNECT == 2)
BUS_INTERFACE BUS = M_AXI_IP, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INTERCONNECT == 2)
BUS_INTERFACE BUS = SFSL0, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL0, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 1)
BUS_INTERFACE BUS = MFSL0, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL0, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 1)
BUS_INTERFACE BUS = SFSL1, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL1, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 2)
BUS_INTERFACE BUS = MFSL1, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL1, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 2)
BUS_INTERFACE BUS = SFSL2, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL2, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 3)
BUS_INTERFACE BUS = MFSL2, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL2, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 3)
BUS_INTERFACE BUS = SFSL3, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL3, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 4)
BUS_INTERFACE BUS = MFSL3, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL3, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 4)
BUS_INTERFACE BUS = SFSL4, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL4, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 5)
BUS_INTERFACE BUS = MFSL4, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL4, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 5)
BUS_INTERFACE BUS = SFSL5, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL5, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 6)
BUS_INTERFACE BUS = MFSL5, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL5, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 6)
BUS_INTERFACE BUS = SFSL6, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL6, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 7)
BUS_INTERFACE BUS = MFSL6, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL6, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 7)
BUS_INTERFACE BUS = SFSL7, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL7, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 8)
BUS_INTERFACE BUS = MFSL7, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL7, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 8)
BUS_INTERFACE BUS = SFSL8, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL8, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 9)
BUS_INTERFACE BUS = MFSL8, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL8, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 9)
BUS_INTERFACE BUS = SFSL9, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL9, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 10)
BUS_INTERFACE BUS = MFSL9, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL9, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 10)
BUS_INTERFACE BUS = SFSL10, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL10, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 11)
BUS_INTERFACE BUS = MFSL10, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL10, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 11)
BUS_INTERFACE BUS = SFSL11, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL11, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 12)
BUS_INTERFACE BUS = MFSL11, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL11, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 12)
BUS_INTERFACE BUS = SFSL12, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL12, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 13)
BUS_INTERFACE BUS = MFSL12, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL12, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 13)
BUS_INTERFACE BUS = SFSL13, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL13, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 14)
BUS_INTERFACE BUS = MFSL13, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL13, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 14)
BUS_INTERFACE BUS = SFSL14, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL14, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 15)
BUS_INTERFACE BUS = MFSL14, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL14, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 15)
BUS_INTERFACE BUS = SFSL15, BUS_STD = FSL, BUS_TYPE = SLAVE, EXCLUDE_BUSIF = DRFSL15, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 16)
BUS_INTERFACE BUS = MFSL15, BUS_STD = FSL, BUS_TYPE = MASTER, EXCLUDE_BUSIF = DWFSL15, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 16)
BUS_INTERFACE BUS = DRFSL0, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL0, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 1)
BUS_INTERFACE BUS = DWFSL0, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL0, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 1)
BUS_INTERFACE BUS = DRFSL1, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL1, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 2)
BUS_INTERFACE BUS = DWFSL1, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL1, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 2)
BUS_INTERFACE BUS = DRFSL2, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL2, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 3)
BUS_INTERFACE BUS = DWFSL2, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL2, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 3)
BUS_INTERFACE BUS = DRFSL3, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL3, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 4)
BUS_INTERFACE BUS = DWFSL3, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL3, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 4)
BUS_INTERFACE BUS = DRFSL4, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL4, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 5)
BUS_INTERFACE BUS = DWFSL4, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL4, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 5)
BUS_INTERFACE BUS = DRFSL5, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL5, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 6)
BUS_INTERFACE BUS = DWFSL5, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL5, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 6)
BUS_INTERFACE BUS = DRFSL6, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL6, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 7)
BUS_INTERFACE BUS = DWFSL6, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL6, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 7)
BUS_INTERFACE BUS = DRFSL7, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL7, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 8)
BUS_INTERFACE BUS = DWFSL7, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL7, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 8)
BUS_INTERFACE BUS = DRFSL8, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL8, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 9)
BUS_INTERFACE BUS = DWFSL8, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL8, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 9)
BUS_INTERFACE BUS = DRFSL9, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL9, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 10)
BUS_INTERFACE BUS = DWFSL9, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL9, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 10)
BUS_INTERFACE BUS = DRFSL10, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL10, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 11)
BUS_INTERFACE BUS = DWFSL10, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL10, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 11)
BUS_INTERFACE BUS = DRFSL11, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL11, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 12)
BUS_INTERFACE BUS = DWFSL11, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL11, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 12)
BUS_INTERFACE BUS = DRFSL12, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL12, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 13)
BUS_INTERFACE BUS = DWFSL12, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL12, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 13)
BUS_INTERFACE BUS = DRFSL13, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL13, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 14)
BUS_INTERFACE BUS = DWFSL13, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL13, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 14)
BUS_INTERFACE BUS = DRFSL14, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL14, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 15)
BUS_INTERFACE BUS = DWFSL14, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL14, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 15)
BUS_INTERFACE BUS = DRFSL15, BUS_STD = XIL_DRFSL, BUS_TYPE = TARGET, EXCLUDE_BUSIF = SFSL15, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 16)
BUS_INTERFACE BUS = DWFSL15, BUS_STD = XIL_DWFSL, BUS_TYPE = INITIATOR, EXCLUDE_BUSIF = MFSL15, ISVALID = (C_STREAM_INTERCONNECT == 0 && C_FSL_LINKS >= 16)
BUS_INTERFACE BUS = M0_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 1)
BUS_INTERFACE BUS = S0_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 1)
BUS_INTERFACE BUS = M1_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 2)
BUS_INTERFACE BUS = S1_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 2)
BUS_INTERFACE BUS = M2_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 3)
BUS_INTERFACE BUS = S2_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 3)
BUS_INTERFACE BUS = M3_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 4)
BUS_INTERFACE BUS = S3_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 4)
BUS_INTERFACE BUS = M4_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 5)
BUS_INTERFACE BUS = S4_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 5)
BUS_INTERFACE BUS = M5_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 6)
BUS_INTERFACE BUS = S5_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 6)
BUS_INTERFACE BUS = M6_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 7)
BUS_INTERFACE BUS = S6_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 7)
BUS_INTERFACE BUS = M7_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 8)
BUS_INTERFACE BUS = S7_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 8)
BUS_INTERFACE BUS = M8_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 9)
BUS_INTERFACE BUS = S8_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 9)
BUS_INTERFACE BUS = M9_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 10)
BUS_INTERFACE BUS = S9_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 10)
BUS_INTERFACE BUS = M10_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 11)
BUS_INTERFACE BUS = S10_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 11)
BUS_INTERFACE BUS = M11_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 12)
BUS_INTERFACE BUS = S11_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 12)
BUS_INTERFACE BUS = M12_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 13)
BUS_INTERFACE BUS = S12_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 13)
BUS_INTERFACE BUS = M13_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 14)
BUS_INTERFACE BUS = S13_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 14)
BUS_INTERFACE BUS = M14_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 15)
BUS_INTERFACE BUS = S14_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 15)
BUS_INTERFACE BUS = M15_AXIS, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 16)
BUS_INTERFACE BUS = S15_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_STREAM_INTERCONNECT == 1 && C_FSL_LINKS >= 16)
BUS_INTERFACE BUS = DXCL, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = INITIATOR, ISVALID = (C_INTERCONNECT == 1)
BUS_INTERFACE BUS = IXCL, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = INITIATOR, ISVALID = (C_INTERCONNECT == 1)
BUS_INTERFACE BUS = M_AXI_DC, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INTERCONNECT == 2 && C_USE_DCACHE == 1)
BUS_INTERFACE BUS = M_AXI_IC, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INTERCONNECT == 2 && C_USE_ICACHE == 1)
BUS_INTERFACE BUS = DEBUG, BUS_STD = XIL_MBDEBUG3, BUS_TYPE = TARGET
BUS_INTERFACE BUS = TRACE, BUS_STD = XIL_MBTRACE2, BUS_TYPE = INITIATOR

## Generics for VHDL or Parameters for Verilog
PARAMETER C_SCO = 0, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_FREQ = 0, DT = integer, IO_IS = clk_freq, CLK_PORT = CLK, CLK_UNIT = HZ
PARAMETER C_DATA_SIZE = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_DYNAMIC_BUS_SIZING = 1, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_FAMILY = virtex5, DT = string
PARAMETER C_INSTANCE = microblaze, DT = string
PARAMETER C_FAULT_TOLERANT = 0, DT = integer, RANGE = (0:1)
PARAMETER C_ECC_USE_CE_EXCEPTION = 0, DT = integer, RANGE = (0:1), ISVALID = (C_FAULT_TOLERANT == 1)
PARAMETER C_ENDIANNESS = 0, DT = integer, RANGE = (0:1), ASSIGNMENT = UPDATE, VALUES = (0=BIG, 1=LITTLE), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_endianness
PARAMETER C_AREA_OPTIMIZED = 0, DT = integer, RANGE = (0:1)
PARAMETER C_OPTIMIZATION = 0, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_INTERCONNECT = 1, DT = integer, RANGE = (1,2), VALUES = (1=PLBv46, 2=AXI)
PARAMETER C_STREAM_INTERCONNECT = 0, DT = integer, RANGE = (0,1), VALUES = (0=FSL, 1=AXI)
PARAMETER C_DPLB_DWIDTH = 32, DT = integer, RANGE = (32,64,128), BUS = DPLB
PARAMETER C_DPLB_NATIVE_DWIDTH = 32, DT = integer, RANGE = (32:32), ASSIGNMENT = CONSTANT, BUS = DPLB
PARAMETER C_DPLB_BURST_EN = 0, DT = integer, RANGE = (0:0), ASSIGNMENT = CONSTANT, BUS = DPLB
PARAMETER C_DPLB_P2P = 0, DT = integer, RANGE = (0:1), BUS = DPLB
PARAMETER C_IPLB_DWIDTH = 32, DT = integer, RANGE = (32,64,128), BUS = IPLB
PARAMETER C_IPLB_NATIVE_DWIDTH = 32, DT = integer, RANGE = (32:32), ASSIGNMENT = CONSTANT, BUS = IPLB
PARAMETER C_IPLB_BURST_EN = 0, DT = integer, RANGE = (0:0), ASSIGNMENT = CONSTANT, BUS = IPLB
PARAMETER C_IPLB_P2P = 0, DT = integer, RANGE = (0:1), BUS = IPLB
PARAMETER C_M_AXI_DP_SUPPORTS_THREADS = 0, DT = integer, BUS = M_AXI_DP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_DP_THREAD_ID_WIDTH = 1, DT = integer, BUS = M_AXI_DP, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DP_SUPPORTS_READ = 1, DT = integer, BUS = M_AXI_DP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_DP_SUPPORTS_WRITE = 1, DT = integer, BUS = M_AXI_DP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_DP_SUPPORTS_NARROW_BURST = 0, DT = integer, BUS = M_AXI_DP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_DP_DATA_WIDTH = 32, DT = integer, RANGE = (32), BUS = M_AXI_DP
PARAMETER C_M_AXI_DP_ADDR_WIDTH = 32, DT = integer, RANGE = (32), BUS = M_AXI_DP, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DP_PROTOCOL = AXI4LITE, DT = string, TYPE = NON_HDL, ASSIGNMENT = UPDATE, BUS = M_AXI_DP, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_m_axi_dp_protocol
PARAMETER C_M_AXI_DP_EXCLUSIVE_ACCESS = 0, DT = integer, RANGE = (0:1), ISVALID = (C_INTERCONNECT == 2)
PARAMETER C_INTERCONNECT_M_AXI_DP_READ_ISSUING = 1, DT = integer, BUS = M_AXI_DP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_DP_WRITE_ISSUING = 1, DT = integer, BUS = M_AXI_DP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_IP_SUPPORTS_THREADS = 0, DT = integer, BUS = M_AXI_IP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_IP_THREAD_ID_WIDTH = 1, DT = integer, BUS = M_AXI_IP, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_IP_SUPPORTS_READ = 1, DT = integer, BUS = M_AXI_IP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_IP_SUPPORTS_WRITE = 0, DT = integer, BUS = M_AXI_IP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_IP_SUPPORTS_NARROW_BURST = 0, DT = integer, BUS = M_AXI_IP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_IP_DATA_WIDTH = 32, DT = integer, RANGE = (32), BUS = M_AXI_IP
PARAMETER C_M_AXI_IP_ADDR_WIDTH = 32, DT = integer, RANGE = (32), BUS = M_AXI_IP, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_IP_PROTOCOL = AXI4LITE, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_IP
PARAMETER C_INTERCONNECT_M_AXI_IP_READ_ISSUING = 1, DT = integer, BUS = M_AXI_IP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_D_AXI = 0, DT = integer, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_d_axi
PARAMETER C_D_PLB = 0, DT = integer, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_d_plb
PARAMETER C_D_LMB = 1, DT = integer, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_d_lmb
PARAMETER C_I_AXI = 0, DT = integer, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_i_axi
PARAMETER C_I_PLB = 0, DT = integer, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_i_plb
PARAMETER C_I_LMB = 1, DT = integer, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_i_lmb
PARAMETER C_USE_MSR_INSTR = 1, DT = integer, RANGE = (0:1)
PARAMETER C_USE_PCMP_INSTR = 1, DT = integer, RANGE = (0:1)
PARAMETER C_USE_BARREL = 0, DT = integer, RANGE = (0:1)
PARAMETER C_USE_DIV = 0, DT = integer, RANGE = (0:1)
PARAMETER C_USE_HW_MUL = 1, DT = integer, VALUES = (0= NONE, 1= MUL32, 2= MUL64)
PARAMETER C_USE_FPU = 0, DT = integer, VALUES = (0= NONE, 1= BASIC, 2= EXTENDED)
PARAMETER C_UNALIGNED_EXCEPTIONS = 0, DT = integer, RANGE = (0:1)
PARAMETER C_ILL_OPCODE_EXCEPTION = 0, DT = integer, RANGE = (0:1)
PARAMETER C_M_AXI_I_BUS_EXCEPTION = 0, DT = integer, RANGE = (0,1), ISVALID = (C_INTERCONNECT == 2)
PARAMETER C_M_AXI_D_BUS_EXCEPTION = 0, DT = integer, RANGE = (0,1), ISVALID = (C_INTERCONNECT == 2)
PARAMETER C_IPLB_BUS_EXCEPTION = 0, DT = integer, RANGE = (0:1), ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_DPLB_BUS_EXCEPTION = 0, DT = integer, RANGE = (0:1), ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_DIV_ZERO_EXCEPTION = 0, DT = integer, RANGE = (0:1), ISVALID = (C_USE_DIV == 1)
PARAMETER C_FPU_EXCEPTION = 0, DT = integer, RANGE = (0:1), ISVALID = (C_USE_FPU >= 1)
PARAMETER C_FSL_EXCEPTION = 0, DT = integer, RANGE = (0:1), ISVALID = (C_FSL_LINKS >= 1 && C_USE_EXTENDED_FSL_INSTR >= 1)
PARAMETER C_PVR = 0, DT = integer, VALUES = (0= NONE, 1= BASIC, 2= FULL)
PARAMETER C_PVR_USER1 = 0x00, DT = std_logic_vector(0 to 7)
PARAMETER C_PVR_USER2 = 0x00000000, DT = std_logic_vector(0 to 31)
PARAMETER C_DEBUG_ENABLED = 0, DT = integer, RANGE = (0:1)
PARAMETER C_NUMBER_OF_PC_BRK = 1, DT = integer, RANGE = (0:8)
PARAMETER C_NUMBER_OF_RD_ADDR_BRK = 0, DT = integer, RANGE = (0:4)
PARAMETER C_NUMBER_OF_WR_ADDR_BRK = 0, DT = integer, RANGE = (0:4)
PARAMETER C_INTERRUPT_IS_EDGE = 0, DT = integer, RANGE = (0:1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_interrupt_edge
PARAMETER C_EDGE_IS_POSITIVE = 1, DT = integer, RANGE = (0:1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_edge_positive
PARAMETER C_RESET_MSR = 0x00000000, DT = std_logic_vector, VALUES = (0x0000= NONE, 0x0020= ICE, 0x0080= DCE, 0x00a0= ICE_DCE)
PARAMETER C_OPCODE_0x0_ILLEGAL = 0, DT = integer, RANGE = (0:1)
PARAMETER C_FSL_LINKS = 0, DT = integer, RANGE = (0:16)
PARAMETER C_FSL_DATA_SIZE = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_USE_EXTENDED_FSL_INSTR = 0, DT = integer, RANGE = (0:1), ISVALID = (C_FSL_LINKS >= 1)
PARAMETER C_M0_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M0_AXIS
PARAMETER C_S0_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S0_AXIS
PARAMETER C_M1_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M1_AXIS
PARAMETER C_S1_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S1_AXIS
PARAMETER C_M2_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M2_AXIS
PARAMETER C_S2_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S2_AXIS
PARAMETER C_M3_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M3_AXIS
PARAMETER C_S3_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S3_AXIS
PARAMETER C_M4_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M4_AXIS
PARAMETER C_S4_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S4_AXIS
PARAMETER C_M5_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M5_AXIS
PARAMETER C_S5_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S5_AXIS
PARAMETER C_M6_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M6_AXIS
PARAMETER C_S6_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S6_AXIS
PARAMETER C_M7_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M7_AXIS
PARAMETER C_S7_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S7_AXIS
PARAMETER C_M8_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M8_AXIS
PARAMETER C_S8_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S8_AXIS
PARAMETER C_M9_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M9_AXIS
PARAMETER C_S9_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S9_AXIS
PARAMETER C_M10_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M10_AXIS
PARAMETER C_S10_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S10_AXIS
PARAMETER C_M11_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M11_AXIS
PARAMETER C_S11_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S11_AXIS
PARAMETER C_M12_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M12_AXIS
PARAMETER C_S12_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S12_AXIS
PARAMETER C_M13_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M13_AXIS
PARAMETER C_S13_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S13_AXIS
PARAMETER C_M14_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M14_AXIS
PARAMETER C_S14_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S14_AXIS
PARAMETER C_M15_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M15_AXIS
PARAMETER C_S15_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S15_AXIS
PARAMETER C_M0_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S0_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M1_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S1_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M2_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S2_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M3_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S3_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M4_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S4_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M5_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S5_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M6_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S6_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M7_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S7_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M8_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S8_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M9_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S9_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M10_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S10_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M11_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S11_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M12_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S12_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M13_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S13_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M14_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S14_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_M15_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S15_AXIS_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_ICACHE_BASEADDR = 0x00000000, DT = std_logic_vector, ADDRESS = NONE, ASSIGNMENT = OPTIONAL, SYSLEVEL_UPDATE_VALUE_PROC = update_icache_baseaddr
PARAMETER C_ICACHE_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector, ADDRESS = NONE, ASSIGNMENT = OPTIONAL, SYSLEVEL_UPDATE_VALUE_PROC = update_icache_highaddr
PARAMETER C_USE_ICACHE = 0, DT = integer, RANGE = (0:1)
PARAMETER C_ALLOW_ICACHE_WR = 1, DT = integer, RANGE = (0:1)
PARAMETER C_ADDR_TAG_BITS = 17, DT = integer, RANGE = (0:25), ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = update_icache_tag_bits
PARAMETER C_CACHE_BYTE_SIZE = 8192, DT = integer, VALUES = (64= 64B, 128= 128B, 256= 256B, 512= 512B, 1024= 1kB, 2048= 2kB,4096= 4kB,8192= 8kB,16384= 16kB,32768= 32kB,65536= 64kB)
PARAMETER C_ICACHE_USE_FSL = 1, DT = integer, RANGE = (0:1), ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_cache_use_fsl
PARAMETER C_ICACHE_LINE_LEN = 4, DT = integer, RANGE = (4, 8)
PARAMETER C_ICACHE_ALWAYS_USED = 0, DT = integer, RANGE = (0:1)
PARAMETER C_ICACHE_INTERFACE = 0, DT = integer, RANGE = (0,1), VALUES = (0=IXCL, 1=IXCL2), ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_ICACHE_VICTIMS = 0, DT = integer, RANGE = (0,2,4,8), ISVALID = (C_AREA_OPTIMIZED != 1)
PARAMETER C_ICACHE_STREAMS = 0, DT = integer, RANGE = (0:1), ISVALID = (C_AREA_OPTIMIZED != 1)
PARAMETER C_ICACHE_FORCE_TAG_LUTRAM = 0, DT = integer, RANGE = (0:1)
PARAMETER C_ICACHE_DATA_WIDTH = 0, DT = integer, RANGE = (0:1), VALUES = (0=32-bit, 1=Full Cacheline), ISVALID = (C_AREA_OPTIMIZED != 1 && C_INTERCONNECT == 2 && C_CACHE_BYTE_SIZE >= (2048 * C_ICACHE_LINE_LEN))
PARAMETER C_M_AXI_IC_SUPPORTS_THREADS = 0, DT = integer, BUS = M_AXI_IC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_IC_THREAD_ID_WIDTH = 1, DT = integer, BUS = M_AXI_IC, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_IC_SUPPORTS_READ = 1, DT = integer, BUS = M_AXI_IC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_IC_SUPPORTS_WRITE = 0, DT = integer, BUS = M_AXI_IC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_IC_SUPPORTS_NARROW_BURST = 0, DT = integer, BUS = M_AXI_IC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_IC_DATA_WIDTH = 32, DT = integer, RANGE = (32, 128, 256), BUS = M_AXI_IC, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_m_axi_ic_data_width
PARAMETER C_M_AXI_IC_ADDR_WIDTH = 32, DT = integer, RANGE = (32), BUS = M_AXI_IC, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_IC_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_IC
PARAMETER C_INTERCONNECT_M_AXI_IC_READ_ISSUING = 2, DT = integer, RANGE = (1, 2, 4, 8), BUS = M_AXI_IC, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_m_axi_ic_read_issuing
PARAMETER C_DCACHE_BASEADDR = 0x00000000, DT = std_logic_vector, ADDRESS = NONE, ASSIGNMENT = OPTIONAL, SYSLEVEL_UPDATE_VALUE_PROC = update_dcache_baseaddr
PARAMETER C_DCACHE_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector, ADDRESS = NONE, ASSIGNMENT = OPTIONAL, SYSLEVEL_UPDATE_VALUE_PROC = update_dcache_highaddr
PARAMETER C_USE_DCACHE = 0, DT = integer, RANGE = (0:1)
PARAMETER C_ALLOW_DCACHE_WR = 1, DT = integer, RANGE = (0:1)
PARAMETER C_DCACHE_ADDR_TAG = 17, DT = integer, RANGE = (0:25), ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = update_dcache_tag_bits
PARAMETER C_DCACHE_BYTE_SIZE = 8192, DT = integer, VALUES = (64= 64B, 128= 128B, 256= 256B, 512= 512B, 1024= 1kB, 2048= 2kB,4096= 4kB,8192= 8kB,16384= 16kB,32768= 32kB,65536= 64kB)
PARAMETER C_DCACHE_USE_FSL = 1, DT = integer, RANGE = (0:1), ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_cache_use_fsl
PARAMETER C_DCACHE_LINE_LEN = 4, DT = integer, RANGE = (4, 8)
PARAMETER C_DCACHE_ALWAYS_USED = 0, DT = integer, RANGE = (0:1)
PARAMETER C_DCACHE_INTERFACE = 0, DT = integer, RANGE = (0,1), VALUES = (0=DXCL, 1=DXCL2), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_dcache_interface, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_DCACHE_USE_WRITEBACK = 0, DT = integer, RANGE = (0:1)
PARAMETER C_DCACHE_VICTIMS = 0, DT = integer, RANGE = (0,2,4,8), ISVALID = (C_AREA_OPTIMIZED != 1 && C_DCACHE_USE_WRITEBACK == 1)
PARAMETER C_DCACHE_FORCE_TAG_LUTRAM = 0, DT = integer, RANGE = (0:1)
PARAMETER C_DCACHE_DATA_WIDTH = 0, DT = integer, RANGE = (0:1), VALUES = (0=32-bit, 1=Full Cacheline), ISVALID = (C_AREA_OPTIMIZED != 1 && C_INTERCONNECT == 2 && C_DCACHE_USE_WRITEBACK == 1 && C_DCACHE_BYTE_SIZE >= (2048 * C_DCACHE_LINE_LEN))
PARAMETER C_M_AXI_DC_SUPPORTS_THREADS = 0, DT = integer, BUS = M_AXI_DC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_DC_THREAD_ID_WIDTH = 1, DT = integer, BUS = M_AXI_DC, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DC_SUPPORTS_READ = 1, DT = integer, BUS = M_AXI_DC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_DC_SUPPORTS_WRITE = 1, DT = integer, BUS = M_AXI_DC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_DC_SUPPORTS_NARROW_BURST = 0, DT = integer, BUS = M_AXI_DC, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_DC_DATA_WIDTH = 32, DT = integer, RANGE = (32, 128, 256), BUS = M_AXI_DC, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_m_axi_dc_data_width
PARAMETER C_M_AXI_DC_ADDR_WIDTH = 32, DT = integer, RANGE = (32), BUS = M_AXI_DC, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DC_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_DC
PARAMETER C_M_AXI_DC_EXCLUSIVE_ACCESS = 0, DT = integer, RANGE = (0:1), ISVALID = (C_INTERCONNECT == 2)
PARAMETER C_INTERCONNECT_M_AXI_DC_READ_ISSUING = 2, DT = integer, RANGE = (1, 2), BUS = M_AXI_DC, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_DC_WRITE_ISSUING = 32, DT = integer, RANGE = (1, 2, 4, 8, 16, 32), BUS = M_AXI_DC, TYPE = NON_HDL
PARAMETER C_USE_MMU = 0, DT = integer, VALUES = (0= NONE, 1=USERMODE, 2=PROTECTION, 3=VIRTUAL), ISVALID = (C_AREA_OPTIMIZED == 0)
PARAMETER C_MMU_DTLB_SIZE = 4, DT = integer, VALUES = (1= 1, 2= 2, 4= 4, 8= 8), ISVALID = (C_USE_MMU >= 2 && C_AREA_OPTIMIZED == 0)
PARAMETER C_MMU_ITLB_SIZE = 2, DT = integer, VALUES = (1= 1, 2= 2, 4= 4, 8= 8), ISVALID = (C_USE_MMU >= 2 && C_AREA_OPTIMIZED == 0)
PARAMETER C_MMU_TLB_ACCESS = 3, DT = integer, VALUES = (0=MINIMAL, 1=READ, 2=WRITE, 3=FULL), ISVALID = (C_USE_MMU >= 2 && C_AREA_OPTIMIZED == 0)
PARAMETER C_MMU_ZONES = 16, DT = integer, RANGE = (0:16), ISVALID = (C_USE_MMU >= 2 && C_AREA_OPTIMIZED == 0)
PARAMETER C_USE_INTERRUPT = 0, DT = integer, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_interrupt
PARAMETER C_USE_EXT_BRK = 0, DT = integer, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_ext_brk
PARAMETER C_USE_EXT_NM_BRK = 0, DT = integer, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_ext_nm_brk
PARAMETER C_USE_BRANCH_TARGET_CACHE = 0, DT = integer, RANGE = (0:1), ISVALID = (C_AREA_OPTIMIZED == 0)
PARAMETER C_BRANCH_TARGET_CACHE_SIZE = 0, DT = integer, VALUES = (0=DEFAULT, 1=   8 ENTRIES, 2=  16 ENTRIES, 3=  32 ENTRIES, 4=  64 ENTRIES, 5= 512 ENTRIES, 6=1024 ENTRIES, 7=2048 ENTRIES), ISVALID = (C_AREA_OPTIMIZED == 0)

## Ports
PORT CLK = "", DIR = I, SIGIS = CLK, BUS = DPLB:IPLB:DLMB:ILMB:M_AXI_DP:M_AXI_IP:M_AXI_DC:M_AXI_IC, ASSIGNMENT = REQUIRE
PORT RESET = LMB_Rst, DIR = I, SIGIS = RST, BUS = DLMB:ILMB
PORT MB_RESET = "", DIR = I, SIGIS = RST
PORT INTERRUPT = "", DIR = I, LEVEL = HIGH, SIGIS = INTERRUPT
PORT EXT_BRK = Ext_BRK, DIR = I
PORT EXT_NM_BRK = Ext_NM_BRK, DIR = I
PORT DBG_STOP = "", DIR = I
PORT MB_Halted = "", DIR = O
PORT MB_Error = "", DIR = O
PORT INSTR = LMB_ReadDBus, DIR = I, VEC = [0:31], BUS = ILMB
PORT IREADY = LMB_Ready, DIR = I, BUS = ILMB
PORT IWAIT = LMB_Wait, DIR = I, BUS = ILMB
PORT ICE = LMB_CE, DIR = I, BUS = ILMB
PORT IUE = LMB_UE, DIR = I, BUS = ILMB
PORT INSTR_ADDR = M_ABus, DIR = O, VEC = [0:31], BUS = ILMB
PORT IFETCH = M_ReadStrobe, DIR = O, BUS = ILMB
PORT I_AS = M_AddrStrobe, DIR = O, BUS = ILMB
PORT IPLB_M_ABort = M_ABort, DIR = O, BUS = IPLB
PORT IPLB_M_ABus = M_ABus, DIR = O, VEC = [0:31], BUS = IPLB
PORT IPLB_M_UABus = M_UABus, DIR = O, VEC = [0:31], BUS = IPLB
PORT IPLB_M_BE = M_BE, DIR = O, VEC = [0:(C_IPLB_DWIDTH-1)/8], BUS = IPLB
PORT IPLB_M_busLock = M_busLock, DIR = O, BUS = IPLB
PORT IPLB_M_lockErr = M_lockErr, DIR = O, BUS = IPLB
PORT IPLB_M_MSize = M_MSize, DIR = O, VEC = [0:1], BUS = IPLB
PORT IPLB_M_priority = M_priority, DIR = O, VEC = [0:1], BUS = IPLB
PORT IPLB_M_rdBurst = M_rdBurst, DIR = O, BUS = IPLB
PORT IPLB_M_request = M_request, DIR = O, BUS = IPLB
PORT IPLB_M_RNW = M_RNW, DIR = O, BUS = IPLB
PORT IPLB_M_size = M_size, DIR = O, VEC = [0:3], BUS = IPLB
PORT IPLB_M_TAttribute = M_TAttribute, DIR = O, VEC = [0:15], BUS = IPLB
PORT IPLB_M_type = M_type, DIR = O, VEC = [0:2], BUS = IPLB
PORT IPLB_M_wrBurst = M_wrBurst, DIR = O, BUS = IPLB
PORT IPLB_M_wrDBus = M_wrDBus, DIR = O, VEC = [0:C_IPLB_DWIDTH-1], BUS = IPLB
PORT IPLB_MBusy = PLB_MBusy, DIR = I, BUS = IPLB
PORT IPLB_MRdErr = PLB_MRdErr, DIR = I, BUS = IPLB
PORT IPLB_MWrErr = PLB_MWrErr, DIR = I, BUS = IPLB
PORT IPLB_MIRQ = PLB_MIRQ, DIR = I, BUS = IPLB
PORT IPLB_MWrBTerm = PLB_MWrBTerm, DIR = I, BUS = IPLB
PORT IPLB_MWrDAck = PLB_MWrDAck, DIR = I, BUS = IPLB
PORT IPLB_MAddrAck = PLB_MAddrAck, DIR = I, BUS = IPLB
PORT IPLB_MRdBTerm = PLB_MRdBTerm, DIR = I, BUS = IPLB
PORT IPLB_MRdDAck = PLB_MRdDAck, DIR = I, BUS = IPLB
PORT IPLB_MRdDBus = PLB_MRdDBus, DIR = I, VEC = [0:C_IPLB_DWIDTH-1], BUS = IPLB
PORT IPLB_MRdWdAddr = PLB_MRdWdAddr, DIR = I, VEC = [0:3], BUS = IPLB
PORT IPLB_MRearbitrate = PLB_MRearbitrate, DIR = I, BUS = IPLB
PORT IPLB_MSSize = PLB_MSSize, DIR = I, VEC = [0:1], BUS = IPLB
PORT IPLB_MTimeout = PLB_MTimeout, DIR = I, BUS = IPLB
PORT DATA_READ = LMB_ReadDBus, DIR = I, VEC = [0:31], BUS = DLMB
PORT DREADY = LMB_Ready, DIR = I, BUS = DLMB
PORT DWAIT = LMB_Wait, DIR = I, BUS = DLMB
PORT DCE = LMB_CE, DIR = I, BUS = DLMB
PORT DUE = LMB_UE, DIR = I, BUS = DLMB
PORT DATA_WRITE = M_DBus, DIR = O, VEC = [0:31], BUS = DLMB
PORT DATA_ADDR = M_ABus, DIR = O, VEC = [0:31], BUS = DLMB
PORT D_AS = M_AddrStrobe, DIR = O, BUS = DLMB
PORT READ_STROBE = M_ReadStrobe, DIR = O, BUS = DLMB
PORT WRITE_STROBE = M_WriteStrobe, DIR = O, BUS = DLMB
PORT BYTE_ENABLE = M_BE, DIR = O, VEC = [0:3], BUS = DLMB
PORT DPLB_M_ABort = M_ABort, DIR = O, BUS = DPLB
PORT DPLB_M_ABus = M_ABus, DIR = O, VEC = [0:31], BUS = DPLB
PORT DPLB_M_UABus = M_UABus, DIR = O, VEC = [0:31], BUS = DPLB
PORT DPLB_M_BE = M_BE, DIR = O, VEC = [0:(C_DPLB_DWIDTH-1)/8], BUS = DPLB
PORT DPLB_M_busLock = M_busLock, DIR = O, BUS = DPLB
PORT DPLB_M_lockErr = M_lockErr, DIR = O, BUS = DPLB
PORT DPLB_M_MSize = M_MSize, DIR = O, VEC = [0:1], BUS = DPLB
PORT DPLB_M_priority = M_priority, DIR = O, VEC = [0:1], BUS = DPLB
PORT DPLB_M_rdBurst = M_rdBurst, DIR = O, BUS = DPLB
PORT DPLB_M_request = M_request, DIR = O, BUS = DPLB
PORT DPLB_M_RNW = M_RNW, DIR = O, BUS = DPLB
PORT DPLB_M_size = M_size, DIR = O, VEC = [0:3], BUS = DPLB
PORT DPLB_M_TAttribute = M_TAttribute, DIR = O, VEC = [0:15], BUS = DPLB
PORT DPLB_M_type = M_type, DIR = O, VEC = [0:2], BUS = DPLB
PORT DPLB_M_wrBurst = M_wrBurst, DIR = O, BUS = DPLB
PORT DPLB_M_wrDBus = M_wrDBus, DIR = O, VEC = [0:C_DPLB_DWIDTH-1], BUS = DPLB
PORT DPLB_MBusy = PLB_MBusy, DIR = I, BUS = DPLB
PORT DPLB_MRdErr = PLB_MRdErr, DIR = I, BUS = DPLB
PORT DPLB_MWrErr = PLB_MWrErr, DIR = I, BUS = DPLB
PORT DPLB_MIRQ = PLB_MIRQ, DIR = I, BUS = DPLB
PORT DPLB_MWrBTerm = PLB_MWrBTerm, DIR = I, BUS = DPLB
PORT DPLB_MWrDAck = PLB_MWrDAck, DIR = I, BUS = DPLB
PORT DPLB_MAddrAck = PLB_MAddrAck, DIR = I, BUS = DPLB
PORT DPLB_MRdBTerm = PLB_MRdBTerm, DIR = I, BUS = DPLB
PORT DPLB_MRdDAck = PLB_MRdDAck, DIR = I, BUS = DPLB
PORT DPLB_MRdDBus = PLB_MRdDBus, DIR = I, VEC = [0:C_DPLB_DWIDTH-1], BUS = DPLB
PORT DPLB_MRdWdAddr = PLB_MRdWdAddr, DIR = I, VEC = [0:3], BUS = DPLB
PORT DPLB_MRearbitrate = PLB_MRearbitrate, DIR = I, BUS = DPLB
PORT DPLB_MSSize = PLB_MSSize, DIR = I, VEC = [0:1], BUS = DPLB
PORT DPLB_MTimeout = PLB_MTimeout, DIR = I, BUS = DPLB
PORT M_AXI_IP_AWID = AWID, DIR = O, VEC = [(C_M_AXI_IP_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IP
PORT M_AXI_IP_AWADDR = AWADDR, DIR = O, VEC = [(C_M_AXI_IP_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IP
PORT M_AXI_IP_AWLEN = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_IP
PORT M_AXI_IP_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_IP
PORT M_AXI_IP_AWBURST = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_IP
PORT M_AXI_IP_AWLOCK = AWLOCK, DIR = O, BUS = M_AXI_IP
PORT M_AXI_IP_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_IP
PORT M_AXI_IP_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_IP
PORT M_AXI_IP_AWQOS = AWQOS, DIR = O, VEC = [3:0], BUS = M_AXI_IP
PORT M_AXI_IP_AWVALID = AWVALID, DIR = O, BUS = M_AXI_IP
PORT M_AXI_IP_AWREADY = AWREADY, DIR = I, BUS = M_AXI_IP
PORT M_AXI_IP_WDATA = WDATA, DIR = O, VEC = [(C_M_AXI_IP_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IP
PORT M_AXI_IP_WSTRB = WSTRB, DIR = O, VEC = [((C_M_AXI_IP_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = M_AXI_IP
PORT M_AXI_IP_WLAST = WLAST, DIR = O, BUS = M_AXI_IP
PORT M_AXI_IP_WVALID = WVALID, DIR = O, BUS = M_AXI_IP
PORT M_AXI_IP_WREADY = WREADY, DIR = I, BUS = M_AXI_IP
PORT M_AXI_IP_BID = BID, DIR = I, VEC = [(C_M_AXI_IP_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IP
PORT M_AXI_IP_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_IP
PORT M_AXI_IP_BVALID = BVALID, DIR = I, BUS = M_AXI_IP
PORT M_AXI_IP_BREADY = BREADY, DIR = O, BUS = M_AXI_IP
PORT M_AXI_IP_ARID = ARID, DIR = O, VEC = [(C_M_AXI_IP_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IP
PORT M_AXI_IP_ARADDR = ARADDR, DIR = O, VEC = [(C_M_AXI_IP_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IP
PORT M_AXI_IP_ARLEN = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI_IP
PORT M_AXI_IP_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_IP
PORT M_AXI_IP_ARBURST = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_IP
PORT M_AXI_IP_ARLOCK = ARLOCK, DIR = O, BUS = M_AXI_IP
PORT M_AXI_IP_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_IP
PORT M_AXI_IP_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_IP
PORT M_AXI_IP_ARQOS = ARQOS, DIR = O, VEC = [3:0], BUS = M_AXI_IP
PORT M_AXI_IP_ARVALID = ARVALID, DIR = O, BUS = M_AXI_IP
PORT M_AXI_IP_ARREADY = ARREADY, DIR = I, BUS = M_AXI_IP
PORT M_AXI_IP_RID = RID, DIR = I, VEC = [(C_M_AXI_IP_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IP
PORT M_AXI_IP_RDATA = RDATA, DIR = I, VEC = [(C_M_AXI_IP_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IP
PORT M_AXI_IP_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_IP
PORT M_AXI_IP_RLAST = RLAST, DIR = I, BUS = M_AXI_IP
PORT M_AXI_IP_RVALID = RVALID, DIR = I, BUS = M_AXI_IP
PORT M_AXI_IP_RREADY = RREADY, DIR = O, BUS = M_AXI_IP
PORT M_AXI_DP_AWID = AWID, DIR = O, VEC = [(C_M_AXI_DP_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DP
PORT M_AXI_DP_AWADDR = AWADDR, DIR = O, VEC = [(C_M_AXI_DP_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DP
PORT M_AXI_DP_AWLEN = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_DP
PORT M_AXI_DP_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_DP
PORT M_AXI_DP_AWBURST = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_DP
PORT M_AXI_DP_AWLOCK = AWLOCK, DIR = O, BUS = M_AXI_DP
PORT M_AXI_DP_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_DP
PORT M_AXI_DP_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_DP
PORT M_AXI_DP_AWQOS = AWQOS, DIR = O, VEC = [3:0], BUS = M_AXI_DP
PORT M_AXI_DP_AWVALID = AWVALID, DIR = O, BUS = M_AXI_DP
PORT M_AXI_DP_AWREADY = AWREADY, DIR = I, BUS = M_AXI_DP
PORT M_AXI_DP_WDATA = WDATA, DIR = O, VEC = [(C_M_AXI_DP_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DP
PORT M_AXI_DP_WSTRB = WSTRB, DIR = O, VEC = [((C_M_AXI_DP_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = M_AXI_DP
PORT M_AXI_DP_WLAST = WLAST, DIR = O, BUS = M_AXI_DP
PORT M_AXI_DP_WVALID = WVALID, DIR = O, BUS = M_AXI_DP
PORT M_AXI_DP_WREADY = WREADY, DIR = I, BUS = M_AXI_DP
PORT M_AXI_DP_BID = BID, DIR = I, VEC = [(C_M_AXI_DP_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DP
PORT M_AXI_DP_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_DP
PORT M_AXI_DP_BVALID = BVALID, DIR = I, BUS = M_AXI_DP
PORT M_AXI_DP_BREADY = BREADY, DIR = O, BUS = M_AXI_DP
PORT M_AXI_DP_ARID = ARID, DIR = O, VEC = [(C_M_AXI_DP_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DP
PORT M_AXI_DP_ARADDR = ARADDR, DIR = O, VEC = [(C_M_AXI_DP_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DP
PORT M_AXI_DP_ARLEN = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI_DP
PORT M_AXI_DP_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_DP
PORT M_AXI_DP_ARBURST = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_DP
PORT M_AXI_DP_ARLOCK = ARLOCK, DIR = O, BUS = M_AXI_DP
PORT M_AXI_DP_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_DP
PORT M_AXI_DP_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_DP
PORT M_AXI_DP_ARQOS = ARQOS, DIR = O, VEC = [3:0], BUS = M_AXI_DP
PORT M_AXI_DP_ARVALID = ARVALID, DIR = O, BUS = M_AXI_DP
PORT M_AXI_DP_ARREADY = ARREADY, DIR = I, BUS = M_AXI_DP
PORT M_AXI_DP_RID = RID, DIR = I, VEC = [(C_M_AXI_DP_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DP
PORT M_AXI_DP_RDATA = RDATA, DIR = I, VEC = [(C_M_AXI_DP_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DP
PORT M_AXI_DP_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_DP
PORT M_AXI_DP_RLAST = RLAST, DIR = I, BUS = M_AXI_DP
PORT M_AXI_DP_RVALID = RVALID, DIR = I, BUS = M_AXI_DP
PORT M_AXI_DP_RREADY = RREADY, DIR = O, BUS = M_AXI_DP
PORT M_AXI_IC_AWID = AWID, DIR = O, VEC = [(C_M_AXI_IC_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IC
PORT M_AXI_IC_AWADDR = AWADDR, DIR = O, VEC = [(C_M_AXI_IC_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IC
PORT M_AXI_IC_AWLEN = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_IC
PORT M_AXI_IC_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_IC
PORT M_AXI_IC_AWBURST = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_IC
PORT M_AXI_IC_AWLOCK = AWLOCK, DIR = O, BUS = M_AXI_IC
PORT M_AXI_IC_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_IC
PORT M_AXI_IC_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_IC
PORT M_AXI_IC_AWQOS = AWQOS, DIR = O, VEC = [3:0], BUS = M_AXI_IC
PORT M_AXI_IC_AWVALID = AWVALID, DIR = O, BUS = M_AXI_IC
PORT M_AXI_IC_AWREADY = AWREADY, DIR = I, BUS = M_AXI_IC
PORT M_AXI_IC_WDATA = WDATA, DIR = O, VEC = [(C_M_AXI_IC_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IC
PORT M_AXI_IC_WSTRB = WSTRB, DIR = O, VEC = [((C_M_AXI_IC_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = M_AXI_IC
PORT M_AXI_IC_WLAST = WLAST, DIR = O, BUS = M_AXI_IC
PORT M_AXI_IC_WVALID = WVALID, DIR = O, BUS = M_AXI_IC
PORT M_AXI_IC_WREADY = WREADY, DIR = I, BUS = M_AXI_IC
PORT M_AXI_IC_BID = BID, DIR = I, VEC = [(C_M_AXI_IC_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IC
PORT M_AXI_IC_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_IC
PORT M_AXI_IC_BVALID = BVALID, DIR = I, BUS = M_AXI_IC
PORT M_AXI_IC_BREADY = BREADY, DIR = O, BUS = M_AXI_IC
PORT M_AXI_IC_ARID = ARID, DIR = O, VEC = [(C_M_AXI_IC_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IC
PORT M_AXI_IC_ARADDR = ARADDR, DIR = O, VEC = [(C_M_AXI_IC_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IC
PORT M_AXI_IC_ARLEN = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI_IC
PORT M_AXI_IC_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_IC
PORT M_AXI_IC_ARBURST = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_IC
PORT M_AXI_IC_ARLOCK = ARLOCK, DIR = O, BUS = M_AXI_IC
PORT M_AXI_IC_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_IC
PORT M_AXI_IC_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_IC
PORT M_AXI_IC_ARQOS = ARQOS, DIR = O, VEC = [3:0], BUS = M_AXI_IC
PORT M_AXI_IC_ARVALID = ARVALID, DIR = O, BUS = M_AXI_IC
PORT M_AXI_IC_ARREADY = ARREADY, DIR = I, BUS = M_AXI_IC
PORT M_AXI_IC_RID = RID, DIR = I, VEC = [(C_M_AXI_IC_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IC
PORT M_AXI_IC_RDATA = RDATA, DIR = I, VEC = [(C_M_AXI_IC_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_IC
PORT M_AXI_IC_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_IC
PORT M_AXI_IC_RLAST = RLAST, DIR = I, BUS = M_AXI_IC
PORT M_AXI_IC_RVALID = RVALID, DIR = I, BUS = M_AXI_IC
PORT M_AXI_IC_RREADY = RREADY, DIR = O, BUS = M_AXI_IC
PORT M_AXI_DC_AWID = AWID, DIR = O, VEC = [(C_M_AXI_DC_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DC
PORT M_AXI_DC_AWADDR = AWADDR, DIR = O, VEC = [(C_M_AXI_DC_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DC
PORT M_AXI_DC_AWLEN = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_DC
PORT M_AXI_DC_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_DC
PORT M_AXI_DC_AWBURST = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_DC
PORT M_AXI_DC_AWLOCK = AWLOCK, DIR = O, BUS = M_AXI_DC
PORT M_AXI_DC_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_DC
PORT M_AXI_DC_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_DC
PORT M_AXI_DC_AWQOS = AWQOS, DIR = O, VEC = [3:0], BUS = M_AXI_DC
PORT M_AXI_DC_AWVALID = AWVALID, DIR = O, BUS = M_AXI_DC
PORT M_AXI_DC_AWREADY = AWREADY, DIR = I, BUS = M_AXI_DC
PORT M_AXI_DC_WDATA = WDATA, DIR = O, VEC = [(C_M_AXI_DC_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DC
PORT M_AXI_DC_WSTRB = WSTRB, DIR = O, VEC = [((C_M_AXI_DC_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = M_AXI_DC
PORT M_AXI_DC_WLAST = WLAST, DIR = O, BUS = M_AXI_DC
PORT M_AXI_DC_WVALID = WVALID, DIR = O, BUS = M_AXI_DC
PORT M_AXI_DC_WREADY = WREADY, DIR = I, BUS = M_AXI_DC
PORT M_AXI_DC_BID = BID, DIR = I, VEC = [(C_M_AXI_DC_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DC
PORT M_AXI_DC_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_DC
PORT M_AXI_DC_BVALID = BVALID, DIR = I, BUS = M_AXI_DC
PORT M_AXI_DC_BREADY = BREADY, DIR = O, BUS = M_AXI_DC
PORT M_AXI_DC_ARID = ARID, DIR = O, VEC = [(C_M_AXI_DC_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DC
PORT M_AXI_DC_ARADDR = ARADDR, DIR = O, VEC = [(C_M_AXI_DC_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DC
PORT M_AXI_DC_ARLEN = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI_DC
PORT M_AXI_DC_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_DC
PORT M_AXI_DC_ARBURST = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_DC
PORT M_AXI_DC_ARLOCK = ARLOCK, DIR = O, BUS = M_AXI_DC
PORT M_AXI_DC_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_DC
PORT M_AXI_DC_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_DC
PORT M_AXI_DC_ARQOS = ARQOS, DIR = O, VEC = [3:0], BUS = M_AXI_DC
PORT M_AXI_DC_ARVALID = ARVALID, DIR = O, BUS = M_AXI_DC
PORT M_AXI_DC_ARREADY = ARREADY, DIR = I, BUS = M_AXI_DC
PORT M_AXI_DC_RID = RID, DIR = I, VEC = [(C_M_AXI_DC_THREAD_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DC
PORT M_AXI_DC_RDATA = RDATA, DIR = I, VEC = [(C_M_AXI_DC_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI_DC
PORT M_AXI_DC_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_DC
PORT M_AXI_DC_RLAST = RLAST, DIR = I, BUS = M_AXI_DC
PORT M_AXI_DC_RVALID = RVALID, DIR = I, BUS = M_AXI_DC
PORT M_AXI_DC_RREADY = RREADY, DIR = O, BUS = M_AXI_DC
PORT DBG_CLK = Dbg_Clk, DIR = I, BUS = DEBUG
PORT DBG_TDI = Dbg_TDI, DIR = I, BUS = DEBUG
PORT DBG_TDO = Dbg_TDO, DIR = O, BUS = DEBUG
PORT DBG_REG_EN = Dbg_Reg_En, DIR = I, VEC = [0:7], BUS = DEBUG
PORT DBG_SHIFT = Dbg_Shift, DIR = I, BUS = DEBUG
PORT DBG_CAPTURE = Dbg_Capture, DIR = I, BUS = DEBUG
PORT DBG_UPDATE = Dbg_Update, DIR = I, BUS = DEBUG
PORT DEBUG_RST = Debug_Rst, DIR = I, SIGIS = RST, BUS = DEBUG
PORT Trace_Instruction = Trace_Instruction, DIR = O, VEC = [0:31], BUS = TRACE
PORT Trace_Valid_Instr = Trace_Valid_Instr, DIR = O, BUS = TRACE
PORT Trace_PC = Trace_PC, DIR = O, VEC = [0:31], BUS = TRACE
PORT Trace_Reg_Write = Trace_Reg_Write, DIR = O, BUS = TRACE
PORT Trace_Reg_Addr = Trace_Reg_Addr, DIR = O, VEC = [0:4], BUS = TRACE
PORT Trace_MSR_Reg = Trace_MSR_Reg, DIR = O, VEC = [0:14], BUS = TRACE
PORT Trace_PID_Reg = Trace_PID_Reg, DIR = O, VEC = [0:7], BUS = TRACE
PORT Trace_New_Reg_Value = Trace_New_Reg_Value, DIR = O, VEC = [0:31], BUS = TRACE
PORT Trace_Exception_Taken = Trace_Exception_Taken, DIR = O, BUS = TRACE
PORT Trace_Exception_Kind = Trace_Exception_Kind, DIR = O, VEC = [0:4], BUS = TRACE
PORT Trace_Jump_Taken = Trace_Jump_Taken, DIR = O, BUS = TRACE
PORT Trace_Delay_Slot = Trace_Delay_Slot, DIR = O, BUS = TRACE
PORT Trace_Data_Address = Trace_Data_Address, DIR = O, VEC = [0:31], BUS = TRACE
PORT Trace_Data_Access = Trace_Data_Access, DIR = O, BUS = TRACE
PORT Trace_Data_Read = Trace_Data_Read, DIR = O, BUS = TRACE
PORT Trace_Data_Write = Trace_Data_Write, DIR = O, BUS = TRACE
PORT Trace_Data_Write_Value = Trace_Data_Write_Value, DIR = O, VEC = [0:31], BUS = TRACE
PORT Trace_Data_Byte_Enable = Trace_Data_Byte_Enable, DIR = O, VEC = [0:3], BUS = TRACE
PORT Trace_DCache_Req = Trace_DCache_Req, DIR = O, BUS = TRACE
PORT Trace_DCache_Hit = Trace_DCache_Hit, DIR = O, BUS = TRACE
PORT Trace_DCache_Rdy = Trace_DCache_Rdy, DIR = O, BUS = TRACE
PORT Trace_DCache_Read = Trace_DCache_Read, DIR = O, BUS = TRACE
PORT Trace_ICache_Req = Trace_ICache_Req, DIR = O, BUS = TRACE
PORT Trace_ICache_Hit = Trace_ICache_Hit, DIR = O, BUS = TRACE
PORT Trace_ICache_Rdy = Trace_ICache_Rdy, DIR = O, BUS = TRACE
PORT Trace_OF_PipeRun = Trace_OF_PipeRun, DIR = O, BUS = TRACE
PORT Trace_EX_PipeRun = Trace_EX_PipeRun, DIR = O, BUS = TRACE
PORT Trace_MEM_PipeRun = Trace_MEM_PipeRun, DIR = O, BUS = TRACE
PORT Trace_MB_Halted = Trace_MB_Halted, DIR = O, BUS = TRACE
PORT Trace_Jump_Hit = Trace_Jump_Hit, DIR = O, BUS = TRACE
PORT FSL0_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL0:DRFSL0
PORT FSL0_S_READ = FSL_S_Read, DIR = O, BUS = SFSL0:DRFSL0
PORT FSL0_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL0:DRFSL0
PORT FSL0_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL0:DRFSL0
PORT FSL0_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL0:DRFSL0
PORT FSL0_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL0:DWFSL0
PORT FSL0_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL0:DWFSL0
PORT FSL0_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL0:DWFSL0
PORT FSL0_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL0:DWFSL0
PORT FSL0_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL0:DWFSL0
PORT FSL1_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL1:DRFSL1
PORT FSL1_S_READ = FSL_S_Read, DIR = O, BUS = SFSL1:DRFSL1
PORT FSL1_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL1:DRFSL1
PORT FSL1_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL1:DRFSL1
PORT FSL1_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL1:DRFSL1
PORT FSL1_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL1:DWFSL1
PORT FSL1_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL1:DWFSL1
PORT FSL1_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL1:DWFSL1
PORT FSL1_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL1:DWFSL1
PORT FSL1_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL1:DWFSL1
PORT FSL2_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL2:DRFSL2
PORT FSL2_S_READ = FSL_S_Read, DIR = O, BUS = SFSL2:DRFSL2
PORT FSL2_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL2:DRFSL2
PORT FSL2_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL2:DRFSL2
PORT FSL2_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL2:DRFSL2
PORT FSL2_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL2:DWFSL2
PORT FSL2_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL2:DWFSL2
PORT FSL2_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL2:DWFSL2
PORT FSL2_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL2:DWFSL2
PORT FSL2_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL2:DWFSL2
PORT FSL3_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL3:DRFSL3
PORT FSL3_S_READ = FSL_S_Read, DIR = O, BUS = SFSL3:DRFSL3
PORT FSL3_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL3:DRFSL3
PORT FSL3_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL3:DRFSL3
PORT FSL3_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL3:DRFSL3
PORT FSL3_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL3:DWFSL3
PORT FSL3_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL3:DWFSL3
PORT FSL3_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL3:DWFSL3
PORT FSL3_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL3:DWFSL3
PORT FSL3_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL3:DWFSL3
PORT FSL4_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL4:DRFSL4
PORT FSL4_S_READ = FSL_S_Read, DIR = O, BUS = SFSL4:DRFSL4
PORT FSL4_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL4:DRFSL4
PORT FSL4_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL4:DRFSL4
PORT FSL4_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL4:DRFSL4
PORT FSL4_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL4:DWFSL4
PORT FSL4_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL4:DWFSL4
PORT FSL4_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL4:DWFSL4
PORT FSL4_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL4:DWFSL4
PORT FSL4_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL4:DWFSL4
PORT FSL5_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL5:DRFSL5
PORT FSL5_S_READ = FSL_S_Read, DIR = O, BUS = SFSL5:DRFSL5
PORT FSL5_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL5:DRFSL5
PORT FSL5_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL5:DRFSL5
PORT FSL5_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL5:DRFSL5
PORT FSL5_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL5:DWFSL5
PORT FSL5_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL5:DWFSL5
PORT FSL5_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL5:DWFSL5
PORT FSL5_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL5:DWFSL5
PORT FSL5_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL5:DWFSL5
PORT FSL6_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL6:DRFSL6
PORT FSL6_S_READ = FSL_S_Read, DIR = O, BUS = SFSL6:DRFSL6
PORT FSL6_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL6:DRFSL6
PORT FSL6_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL6:DRFSL6
PORT FSL6_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL6:DRFSL6
PORT FSL6_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL6:DWFSL6
PORT FSL6_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL6:DWFSL6
PORT FSL6_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL6:DWFSL6
PORT FSL6_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL6:DWFSL6
PORT FSL6_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL6:DWFSL6
PORT FSL7_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL7:DRFSL7
PORT FSL7_S_READ = FSL_S_Read, DIR = O, BUS = SFSL7:DRFSL7
PORT FSL7_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL7:DRFSL7
PORT FSL7_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL7:DRFSL7
PORT FSL7_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL7:DRFSL7
PORT FSL7_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL7:DWFSL7
PORT FSL7_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL7:DWFSL7
PORT FSL7_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL7:DWFSL7
PORT FSL7_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL7:DWFSL7
PORT FSL7_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL7:DWFSL7
PORT FSL8_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL8:DRFSL8
PORT FSL8_S_READ = FSL_S_Read, DIR = O, BUS = SFSL8:DRFSL8
PORT FSL8_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL8:DRFSL8
PORT FSL8_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL8:DRFSL8
PORT FSL8_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL8:DRFSL8
PORT FSL8_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL8:DWFSL8
PORT FSL8_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL8:DWFSL8
PORT FSL8_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL8:DWFSL8
PORT FSL8_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL8:DWFSL8
PORT FSL8_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL8:DWFSL8
PORT FSL9_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL9:DRFSL9
PORT FSL9_S_READ = FSL_S_Read, DIR = O, BUS = SFSL9:DRFSL9
PORT FSL9_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL9:DRFSL9
PORT FSL9_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL9:DRFSL9
PORT FSL9_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL9:DRFSL9
PORT FSL9_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL9:DWFSL9
PORT FSL9_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL9:DWFSL9
PORT FSL9_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL9:DWFSL9
PORT FSL9_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL9:DWFSL9
PORT FSL9_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL9:DWFSL9
PORT FSL10_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL10:DRFSL10
PORT FSL10_S_READ = FSL_S_Read, DIR = O, BUS = SFSL10:DRFSL10
PORT FSL10_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL10:DRFSL10
PORT FSL10_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL10:DRFSL10
PORT FSL10_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL10:DRFSL10
PORT FSL10_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL10:DWFSL10
PORT FSL10_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL10:DWFSL10
PORT FSL10_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL10:DWFSL10
PORT FSL10_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL10:DWFSL10
PORT FSL10_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL10:DWFSL10
PORT FSL11_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL11:DRFSL11
PORT FSL11_S_READ = FSL_S_Read, DIR = O, BUS = SFSL11:DRFSL11
PORT FSL11_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL11:DRFSL11
PORT FSL11_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL11:DRFSL11
PORT FSL11_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL11:DRFSL11
PORT FSL11_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL11:DWFSL11
PORT FSL11_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL11:DWFSL11
PORT FSL11_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL11:DWFSL11
PORT FSL11_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL11:DWFSL11
PORT FSL11_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL11:DWFSL11
PORT FSL12_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL12:DRFSL12
PORT FSL12_S_READ = FSL_S_Read, DIR = O, BUS = SFSL12:DRFSL12
PORT FSL12_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL12:DRFSL12
PORT FSL12_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL12:DRFSL12
PORT FSL12_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL12:DRFSL12
PORT FSL12_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL12:DWFSL12
PORT FSL12_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL12:DWFSL12
PORT FSL12_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL12:DWFSL12
PORT FSL12_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL12:DWFSL12
PORT FSL12_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL12:DWFSL12
PORT FSL13_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL13:DRFSL13
PORT FSL13_S_READ = FSL_S_Read, DIR = O, BUS = SFSL13:DRFSL13
PORT FSL13_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL13:DRFSL13
PORT FSL13_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL13:DRFSL13
PORT FSL13_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL13:DRFSL13
PORT FSL13_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL13:DWFSL13
PORT FSL13_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL13:DWFSL13
PORT FSL13_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL13:DWFSL13
PORT FSL13_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL13:DWFSL13
PORT FSL13_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL13:DWFSL13
PORT FSL14_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL14:DRFSL14
PORT FSL14_S_READ = FSL_S_Read, DIR = O, BUS = SFSL14:DRFSL14
PORT FSL14_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL14:DRFSL14
PORT FSL14_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL14:DRFSL14
PORT FSL14_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL14:DRFSL14
PORT FSL14_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL14:DWFSL14
PORT FSL14_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL14:DWFSL14
PORT FSL14_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL14:DWFSL14
PORT FSL14_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL14:DWFSL14
PORT FSL14_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL14:DWFSL14
PORT FSL15_S_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = SFSL15:DRFSL15
PORT FSL15_S_READ = FSL_S_Read, DIR = O, BUS = SFSL15:DRFSL15
PORT FSL15_S_DATA = FSL_S_Data, DIR = I, VEC = [0:C_FSL_DATA_SIZE-1], BUS = SFSL15:DRFSL15
PORT FSL15_S_CONTROL = FSL_S_Control, DIR = I, BUS = SFSL15:DRFSL15
PORT FSL15_S_EXISTS = FSL_S_Exists, DIR = I, BUS = SFSL15:DRFSL15
PORT FSL15_M_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = MFSL15:DWFSL15
PORT FSL15_M_WRITE = FSL_M_Write, DIR = O, BUS = MFSL15:DWFSL15
PORT FSL15_M_DATA = FSL_M_Data, DIR = O, VEC = [0:C_FSL_DATA_SIZE-1], BUS = MFSL15:DWFSL15
PORT FSL15_M_CONTROL = FSL_M_Control, DIR = O, BUS = MFSL15:DWFSL15
PORT FSL15_M_FULL = FSL_M_Full, DIR = I, BUS = MFSL15:DWFSL15
PORT M0_AXIS_TLAST = TLAST, BUS = M0_AXIS, DIR = O
PORT M0_AXIS_TDATA = TDATA, BUS = M0_AXIS, DIR = O, VEC = [C_M0_AXIS_DATA_WIDTH-1:0]
PORT M0_AXIS_TVALID = TVALID, BUS = M0_AXIS, DIR = O
PORT M0_AXIS_TREADY = TREADY, BUS = M0_AXIS, DIR = I
PORT S0_AXIS_TLAST = TLAST, BUS = S0_AXIS, DIR = I
PORT S0_AXIS_TDATA = TDATA, BUS = S0_AXIS, DIR = I, VEC = [C_S0_AXIS_DATA_WIDTH-1:0]
PORT S0_AXIS_TVALID = TVALID, BUS = S0_AXIS, DIR = I
PORT S0_AXIS_TREADY = TREADY, BUS = S0_AXIS, DIR = O
PORT M1_AXIS_TLAST = TLAST, BUS = M1_AXIS, DIR = O
PORT M1_AXIS_TDATA = TDATA, BUS = M1_AXIS, DIR = O, VEC = [C_M1_AXIS_DATA_WIDTH-1:0]
PORT M1_AXIS_TVALID = TVALID, BUS = M1_AXIS, DIR = O
PORT M1_AXIS_TREADY = TREADY, BUS = M1_AXIS, DIR = I
PORT S1_AXIS_TLAST = TLAST, BUS = S1_AXIS, DIR = I
PORT S1_AXIS_TDATA = TDATA, BUS = S1_AXIS, DIR = I, VEC = [C_S1_AXIS_DATA_WIDTH-1:0]
PORT S1_AXIS_TVALID = TVALID, BUS = S1_AXIS, DIR = I
PORT S1_AXIS_TREADY = TREADY, BUS = S1_AXIS, DIR = O
PORT M2_AXIS_TLAST = TLAST, BUS = M2_AXIS, DIR = O
PORT M2_AXIS_TDATA = TDATA, BUS = M2_AXIS, DIR = O, VEC = [C_M2_AXIS_DATA_WIDTH-1:0]
PORT M2_AXIS_TVALID = TVALID, BUS = M2_AXIS, DIR = O
PORT M2_AXIS_TREADY = TREADY, BUS = M2_AXIS, DIR = I
PORT S2_AXIS_TLAST = TLAST, BUS = S2_AXIS, DIR = I
PORT S2_AXIS_TDATA = TDATA, BUS = S2_AXIS, DIR = I, VEC = [C_S2_AXIS_DATA_WIDTH-1:0]
PORT S2_AXIS_TVALID = TVALID, BUS = S2_AXIS, DIR = I
PORT S2_AXIS_TREADY = TREADY, BUS = S2_AXIS, DIR = O
PORT M3_AXIS_TLAST = TLAST, BUS = M3_AXIS, DIR = O
PORT M3_AXIS_TDATA = TDATA, BUS = M3_AXIS, DIR = O, VEC = [C_M3_AXIS_DATA_WIDTH-1:0]
PORT M3_AXIS_TVALID = TVALID, BUS = M3_AXIS, DIR = O
PORT M3_AXIS_TREADY = TREADY, BUS = M3_AXIS, DIR = I
PORT S3_AXIS_TLAST = TLAST, BUS = S3_AXIS, DIR = I
PORT S3_AXIS_TDATA = TDATA, BUS = S3_AXIS, DIR = I, VEC = [C_S3_AXIS_DATA_WIDTH-1:0]
PORT S3_AXIS_TVALID = TVALID, BUS = S3_AXIS, DIR = I
PORT S3_AXIS_TREADY = TREADY, BUS = S3_AXIS, DIR = O
PORT M4_AXIS_TLAST = TLAST, BUS = M4_AXIS, DIR = O
PORT M4_AXIS_TDATA = TDATA, BUS = M4_AXIS, DIR = O, VEC = [C_M4_AXIS_DATA_WIDTH-1:0]
PORT M4_AXIS_TVALID = TVALID, BUS = M4_AXIS, DIR = O
PORT M4_AXIS_TREADY = TREADY, BUS = M4_AXIS, DIR = I
PORT S4_AXIS_TLAST = TLAST, BUS = S4_AXIS, DIR = I
PORT S4_AXIS_TDATA = TDATA, BUS = S4_AXIS, DIR = I, VEC = [C_S4_AXIS_DATA_WIDTH-1:0]
PORT S4_AXIS_TVALID = TVALID, BUS = S4_AXIS, DIR = I
PORT S4_AXIS_TREADY = TREADY, BUS = S4_AXIS, DIR = O
PORT M5_AXIS_TLAST = TLAST, BUS = M5_AXIS, DIR = O
PORT M5_AXIS_TDATA = TDATA, BUS = M5_AXIS, DIR = O, VEC = [C_M5_AXIS_DATA_WIDTH-1:0]
PORT M5_AXIS_TVALID = TVALID, BUS = M5_AXIS, DIR = O
PORT M5_AXIS_TREADY = TREADY, BUS = M5_AXIS, DIR = I
PORT S5_AXIS_TLAST = TLAST, BUS = S5_AXIS, DIR = I
PORT S5_AXIS_TDATA = TDATA, BUS = S5_AXIS, DIR = I, VEC = [C_S5_AXIS_DATA_WIDTH-1:0]
PORT S5_AXIS_TVALID = TVALID, BUS = S5_AXIS, DIR = I
PORT S5_AXIS_TREADY = TREADY, BUS = S5_AXIS, DIR = O
PORT M6_AXIS_TLAST = TLAST, BUS = M6_AXIS, DIR = O
PORT M6_AXIS_TDATA = TDATA, BUS = M6_AXIS, DIR = O, VEC = [C_M6_AXIS_DATA_WIDTH-1:0]
PORT M6_AXIS_TVALID = TVALID, BUS = M6_AXIS, DIR = O
PORT M6_AXIS_TREADY = TREADY, BUS = M6_AXIS, DIR = I
PORT S6_AXIS_TLAST = TLAST, BUS = S6_AXIS, DIR = I
PORT S6_AXIS_TDATA = TDATA, BUS = S6_AXIS, DIR = I, VEC = [C_S6_AXIS_DATA_WIDTH-1:0]
PORT S6_AXIS_TVALID = TVALID, BUS = S6_AXIS, DIR = I
PORT S6_AXIS_TREADY = TREADY, BUS = S6_AXIS, DIR = O
PORT M7_AXIS_TLAST = TLAST, BUS = M7_AXIS, DIR = O
PORT M7_AXIS_TDATA = TDATA, BUS = M7_AXIS, DIR = O, VEC = [C_M7_AXIS_DATA_WIDTH-1:0]
PORT M7_AXIS_TVALID = TVALID, BUS = M7_AXIS, DIR = O
PORT M7_AXIS_TREADY = TREADY, BUS = M7_AXIS, DIR = I
PORT S7_AXIS_TLAST = TLAST, BUS = S7_AXIS, DIR = I
PORT S7_AXIS_TDATA = TDATA, BUS = S7_AXIS, DIR = I, VEC = [C_S7_AXIS_DATA_WIDTH-1:0]
PORT S7_AXIS_TVALID = TVALID, BUS = S7_AXIS, DIR = I
PORT S7_AXIS_TREADY = TREADY, BUS = S7_AXIS, DIR = O
PORT M8_AXIS_TLAST = TLAST, BUS = M8_AXIS, DIR = O
PORT M8_AXIS_TDATA = TDATA, BUS = M8_AXIS, DIR = O, VEC = [C_M8_AXIS_DATA_WIDTH-1:0]
PORT M8_AXIS_TVALID = TVALID, BUS = M8_AXIS, DIR = O
PORT M8_AXIS_TREADY = TREADY, BUS = M8_AXIS, DIR = I
PORT S8_AXIS_TLAST = TLAST, BUS = S8_AXIS, DIR = I
PORT S8_AXIS_TDATA = TDATA, BUS = S8_AXIS, DIR = I, VEC = [C_S8_AXIS_DATA_WIDTH-1:0]
PORT S8_AXIS_TVALID = TVALID, BUS = S8_AXIS, DIR = I
PORT S8_AXIS_TREADY = TREADY, BUS = S8_AXIS, DIR = O
PORT M9_AXIS_TLAST = TLAST, BUS = M9_AXIS, DIR = O
PORT M9_AXIS_TDATA = TDATA, BUS = M9_AXIS, DIR = O, VEC = [C_M9_AXIS_DATA_WIDTH-1:0]
PORT M9_AXIS_TVALID = TVALID, BUS = M9_AXIS, DIR = O
PORT M9_AXIS_TREADY = TREADY, BUS = M9_AXIS, DIR = I
PORT S9_AXIS_TLAST = TLAST, BUS = S9_AXIS, DIR = I
PORT S9_AXIS_TDATA = TDATA, BUS = S9_AXIS, DIR = I, VEC = [C_S9_AXIS_DATA_WIDTH-1:0]
PORT S9_AXIS_TVALID = TVALID, BUS = S9_AXIS, DIR = I
PORT S9_AXIS_TREADY = TREADY, BUS = S9_AXIS, DIR = O
PORT M10_AXIS_TLAST = TLAST, BUS = M10_AXIS, DIR = O
PORT M10_AXIS_TDATA = TDATA, BUS = M10_AXIS, DIR = O, VEC = [C_M10_AXIS_DATA_WIDTH-1:0]
PORT M10_AXIS_TVALID = TVALID, BUS = M10_AXIS, DIR = O
PORT M10_AXIS_TREADY = TREADY, BUS = M10_AXIS, DIR = I
PORT S10_AXIS_TLAST = TLAST, BUS = S10_AXIS, DIR = I
PORT S10_AXIS_TDATA = TDATA, BUS = S10_AXIS, DIR = I, VEC = [C_S10_AXIS_DATA_WIDTH-1:0]
PORT S10_AXIS_TVALID = TVALID, BUS = S10_AXIS, DIR = I
PORT S10_AXIS_TREADY = TREADY, BUS = S10_AXIS, DIR = O
PORT M11_AXIS_TLAST = TLAST, BUS = M11_AXIS, DIR = O
PORT M11_AXIS_TDATA = TDATA, BUS = M11_AXIS, DIR = O, VEC = [C_M11_AXIS_DATA_WIDTH-1:0]
PORT M11_AXIS_TVALID = TVALID, BUS = M11_AXIS, DIR = O
PORT M11_AXIS_TREADY = TREADY, BUS = M11_AXIS, DIR = I
PORT S11_AXIS_TLAST = TLAST, BUS = S11_AXIS, DIR = I
PORT S11_AXIS_TDATA = TDATA, BUS = S11_AXIS, DIR = I, VEC = [C_S11_AXIS_DATA_WIDTH-1:0]
PORT S11_AXIS_TVALID = TVALID, BUS = S11_AXIS, DIR = I
PORT S11_AXIS_TREADY = TREADY, BUS = S11_AXIS, DIR = O
PORT M12_AXIS_TLAST = TLAST, BUS = M12_AXIS, DIR = O
PORT M12_AXIS_TDATA = TDATA, BUS = M12_AXIS, DIR = O, VEC = [C_M12_AXIS_DATA_WIDTH-1:0]
PORT M12_AXIS_TVALID = TVALID, BUS = M12_AXIS, DIR = O
PORT M12_AXIS_TREADY = TREADY, BUS = M12_AXIS, DIR = I
PORT S12_AXIS_TLAST = TLAST, BUS = S12_AXIS, DIR = I
PORT S12_AXIS_TDATA = TDATA, BUS = S12_AXIS, DIR = I, VEC = [C_S12_AXIS_DATA_WIDTH-1:0]
PORT S12_AXIS_TVALID = TVALID, BUS = S12_AXIS, DIR = I
PORT S12_AXIS_TREADY = TREADY, BUS = S12_AXIS, DIR = O
PORT M13_AXIS_TLAST = TLAST, BUS = M13_AXIS, DIR = O
PORT M13_AXIS_TDATA = TDATA, BUS = M13_AXIS, DIR = O, VEC = [C_M13_AXIS_DATA_WIDTH-1:0]
PORT M13_AXIS_TVALID = TVALID, BUS = M13_AXIS, DIR = O
PORT M13_AXIS_TREADY = TREADY, BUS = M13_AXIS, DIR = I
PORT S13_AXIS_TLAST = TLAST, BUS = S13_AXIS, DIR = I
PORT S13_AXIS_TDATA = TDATA, BUS = S13_AXIS, DIR = I, VEC = [C_S13_AXIS_DATA_WIDTH-1:0]
PORT S13_AXIS_TVALID = TVALID, BUS = S13_AXIS, DIR = I
PORT S13_AXIS_TREADY = TREADY, BUS = S13_AXIS, DIR = O
PORT M14_AXIS_TLAST = TLAST, BUS = M14_AXIS, DIR = O
PORT M14_AXIS_TDATA = TDATA, BUS = M14_AXIS, DIR = O, VEC = [C_M14_AXIS_DATA_WIDTH-1:0]
PORT M14_AXIS_TVALID = TVALID, BUS = M14_AXIS, DIR = O
PORT M14_AXIS_TREADY = TREADY, BUS = M14_AXIS, DIR = I
PORT S14_AXIS_TLAST = TLAST, BUS = S14_AXIS, DIR = I
PORT S14_AXIS_TDATA = TDATA, BUS = S14_AXIS, DIR = I, VEC = [C_S14_AXIS_DATA_WIDTH-1:0]
PORT S14_AXIS_TVALID = TVALID, BUS = S14_AXIS, DIR = I
PORT S14_AXIS_TREADY = TREADY, BUS = S14_AXIS, DIR = O
PORT M15_AXIS_TLAST = TLAST, BUS = M15_AXIS, DIR = O
PORT M15_AXIS_TDATA = TDATA, BUS = M15_AXIS, DIR = O, VEC = [C_M15_AXIS_DATA_WIDTH-1:0]
PORT M15_AXIS_TVALID = TVALID, BUS = M15_AXIS, DIR = O
PORT M15_AXIS_TREADY = TREADY, BUS = M15_AXIS, DIR = I
PORT S15_AXIS_TLAST = TLAST, BUS = S15_AXIS, DIR = I
PORT S15_AXIS_TDATA = TDATA, BUS = S15_AXIS, DIR = I, VEC = [C_S15_AXIS_DATA_WIDTH-1:0]
PORT S15_AXIS_TVALID = TVALID, BUS = S15_AXIS, DIR = I
PORT S15_AXIS_TREADY = TREADY, BUS = S15_AXIS, DIR = O
PORT ICACHE_FSL_IN_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = IXCL
PORT ICACHE_FSL_IN_READ = FSL_S_Read, DIR = O, BUS = IXCL
PORT ICACHE_FSL_IN_DATA = FSL_S_Data, DIR = I, VEC = [0:31], BUS = IXCL
PORT ICACHE_FSL_IN_CONTROL = FSL_S_Control, DIR = I, BUS = IXCL
PORT ICACHE_FSL_IN_EXISTS = FSL_S_Exists, DIR = I, BUS = IXCL
PORT ICACHE_FSL_OUT_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = IXCL
PORT ICACHE_FSL_OUT_WRITE = FSL_M_Write, DIR = O, BUS = IXCL
PORT ICACHE_FSL_OUT_DATA = FSL_M_Data, DIR = O, VEC = [0:31], BUS = IXCL
PORT ICACHE_FSL_OUT_CONTROL = FSL_M_Control, DIR = O, BUS = IXCL
PORT ICACHE_FSL_OUT_FULL = FSL_M_Full, DIR = I, BUS = IXCL
PORT DCACHE_FSL_IN_CLK = FSL_S_Clk, DIR = O, SIGIS = CLK, BUS = DXCL
PORT DCACHE_FSL_IN_READ = FSL_S_Read, DIR = O, BUS = DXCL
PORT DCACHE_FSL_IN_DATA = FSL_S_Data, DIR = I, VEC = [0:31], BUS = DXCL
PORT DCACHE_FSL_IN_CONTROL = FSL_S_Control, DIR = I, BUS = DXCL
PORT DCACHE_FSL_IN_EXISTS = FSL_S_Exists, DIR = I, BUS = DXCL
PORT DCACHE_FSL_OUT_CLK = FSL_M_Clk, DIR = O, SIGIS = CLK, BUS = DXCL
PORT DCACHE_FSL_OUT_WRITE = FSL_M_Write, DIR = O, BUS = DXCL
PORT DCACHE_FSL_OUT_DATA = FSL_M_Data, DIR = O, VEC = [0:31], BUS = DXCL
PORT DCACHE_FSL_OUT_CONTROL = FSL_M_Control, DIR = O, BUS = DXCL
PORT DCACHE_FSL_OUT_FULL = FSL_M_Full, DIR = I, BUS = DXCL

END
