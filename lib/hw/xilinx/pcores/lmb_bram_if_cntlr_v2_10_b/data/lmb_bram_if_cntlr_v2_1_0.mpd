#-- DISCLAIMER OF LIABILITY
#--
#-- This file contains proprietary and confidential information of
#-- Xilinx, Inc. ("Xilinx"), that is distributed under a license
#-- from Xilinx, and may be used, copied and/or disclosed only
#-- pursuant to the terms of a valid license agreement with Xilinx.
#--
#-- XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION
#-- ("MATERIALS") "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
#-- EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING WITHOUT
#-- LIMITATION, ANY WARRANTY WITH RESPECT TO NONINFRINGEMENT,
#-- MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. Xilinx
#-- does not warrant that functions included in the Materials will
#-- meet the requirements of Licensee, or that the operation of the
#-- Materials will be uninterrupted or error-free, or that defects
#-- in the Materials will be corrected. Furthermore, Xilinx does
#-- not warrant or make any representations regarding use, or the
#-- results of the use, of the Materials in terms of correctness,
#-- accuracy, reliability or otherwise.
#--
#-- Xilinx products are not designed or intended to be fail-safe,
#-- or for use in any application requiring fail-safe performance,
#-- such as life-support or safety devices or systems, Class III
#-- medical devices, nuclear facilities, applications related to
#-- the deployment of airbags, or any other applications that could
#-- lead to death, personal injury or severe property or
#-- environmental damage (individually and collectively, "critical
#-- applications"). Customer assumes the sole risk and liability
#-- of any use of Xilinx products in critical applications,
#-- subject only to applicable laws and regulations governing
#-- limitations on product liability.
#--
#-- Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
#--
#-- This disclaimer and copyright notice must be retained as part
#-- of this file at all times.
#--
###################################################################
##
## Name     : lmb_bram_if_cntlr
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN lmb_bram_if_cntlr

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION SPECIAL = BRAM_CNTLR
OPTION NUM_WRITE_ENABLES = 4
OPTION ADDR_SLICE = 29
OPTION DWIDTH = 32
OPTION AWIDTH = 32
OPTION USAGE_LEVEL = BASE_USER
OPTION SYSLEVEL_DRC_PROC = check_syslevel_settings
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION DESC = LMB BRAM Controller
OPTION LONG_DESC = Local Memory Bus (LMB) Block RAM (BRAM) Interface Controller connects to an lmb bus
OPTION IP_GROUP = Memory and Memory Controller:MICROBLAZE
OPTION ARCH_SUPPORT_MAP = (virtex5tx=PRODUCTION, aspartan3=PRODUCTION, spartan3=PRODUCTION, spartan3an=PRODUCTION, spartan3a=PRODUCTION, spartan3e=PRODUCTION, spartan3adsp=PRODUCTION, virtex4lx=PRODUCTION, virtex4sx=PRODUCTION, virtex4fx=PRODUCTION, virtex5lx=PRODUCTION, virtex5sx=PRODUCTION, virtex5fx=PRODUCTION, aspartan3e=PRODUCTION, aspartan3a=PRODUCTION, aspartan3adsp=PRODUCTION, qvirtex4lx=PRODUCTION, qvirtex4sx=PRODUCTION, qvirtex4fx=PRODUCTION, qrvirtex4lx=PRODUCTION, qrvirtex4sx=PRODUCTION, qrvirtex4fx=PRODUCTION, spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRE_PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6hx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRE_PRODUCTION, virtex6lsx=PRE_PRODUCTION, qspartan6l=PRE_PRODUCTION, qrvirtex5=PRE_PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION)
OPTION HDL = MIXED
OPTION RUN_NGCBUILD = FALSE
OPTION STYLE = HDL


## Bus Interfaces
BUS_INTERFACE BUS = SLMB, BUS_STD = LMB, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = BRAM_PORT, BUS_STD = XIL_BRAM, BUS_TYPE = INITIATOR

## Generics for VHDL or Parameters for Verilog
PARAMETER C_BASEADDR = 0xFFFFFFFF, DT = std_logic_vector(0 to 31), BUS = SLMB, MIN_SIZE = 0x800, ADDR_TYPE = MEMORY
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SLMB
PARAMETER C_MASK = 0x00800000, DT = std_logic_vector(0 to 31), SYSLEVEL_UPDATE_VALUE_PROC = update_syslevel_mask, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_LMB_AWIDTH = 32, DT = integer, BUS = SLMB, RANGE = (32:32)
PARAMETER C_LMB_DWIDTH = 32, DT = integer, BUS = SLMB, RANGE = (32:32)

## Ports
PORT LMB_Clk = "", DIR = I, SIGIS = CLK, BUS = SLMB
PORT LMB_Rst = LMB_Rst, DIR = I, BUS = SLMB
PORT LMB_ABus = LMB_ABus, DIR = I, VEC = [0:C_LMB_AWIDTH-1], BUS = SLMB
PORT LMB_WriteDBus = LMB_WriteDBus, DIR = I, VEC = [0:C_LMB_DWIDTH-1], BUS = SLMB
PORT LMB_AddrStrobe = LMB_AddrStrobe, DIR = I, BUS = SLMB
PORT LMB_ReadStrobe = LMB_ReadStrobe, DIR = I, BUS = SLMB
PORT LMB_WriteStrobe = LMB_WriteStrobe, DIR = I, BUS = SLMB
PORT LMB_BE = LMB_BE, DIR = I, VEC = [0:C_LMB_DWIDTH/8-1], BUS = SLMB
PORT Sl_DBus = Sl_DBus, DIR = O, VEC = [0:C_LMB_DWIDTH-1], BUS = SLMB
PORT Sl_Ready = Sl_Ready, DIR = O, BUS = SLMB
PORT BRAM_Rst_A = BRAM_Rst, DIR = O, BUS = BRAM_PORT
PORT BRAM_Clk_A = BRAM_Clk, DIR = O, BUS = BRAM_PORT
PORT BRAM_EN_A = BRAM_EN, DIR = O, BUS = BRAM_PORT
PORT BRAM_WEN_A = BRAM_WEN, DIR = O, VEC = [0:(C_LMB_DWIDTH/8)-1], BUS = BRAM_PORT
PORT BRAM_Addr_A = BRAM_Addr, DIR = O, VEC = [0:C_LMB_AWIDTH-1], BUS = BRAM_PORT
PORT BRAM_Din_A = BRAM_Din, DIR = I, VEC = [0:C_LMB_DWIDTH-1], BUS = BRAM_PORT
PORT BRAM_Dout_A = BRAM_Dout, DIR = O, VEC = [0:C_LMB_DWIDTH-1], BUS = BRAM_PORT

END
