#-- Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_emc
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_emc

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION STYLE = HDL
OPTION HDL = VHDL
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION USAGE_LEVEL = BASE_USER
OPTION DESC = AXI External Memory Controller (SRAM/Flash/Cellular RAM)
OPTION LONG_DESC = AXI External Memory Controller (SRAM/Flash/Cellular RAM)
OPTION IP_GROUP = Memory and Memory Controller:MICROBLAZE
#OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRE_PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRE_PRODUCTION, kintex7=PRE_PRODUCTION, artix7=BETA, zynq=BETA, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION)
OPTION RUN_NGCBUILD = FALSE

IO_INTERFACE IO_IF = emc_0, IO_TYPE = XIL_AXI_EMC_V1

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI_MEM, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = S_AXI_REG, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_S_AXI_EN_REG==1)

## Generics for VHDL or Parameters for Verilog
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_S_AXI_EN_REG = 0, DT = INTEGER, BUS = S_AXI_REG, RANGE = (0:1)
PARAMETER C_S_AXI_REG_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1), ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_REG_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1), ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MEM_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI_MEM, RANGE = (1:16)
PARAMETER C_S_AXI_MEM_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_MEM, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MEM_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_MEM, RANGE = (32,64)
PARAMETER C_S_AXI_MEM_PROTOCOL = axi4, TYPE = NON_HDL, VALUES = (axi4lite=axi4lite, axi4=axi4), BUS = S_AXI_MEM
PARAMETER C_S_AXI_REG_PROTOCOL = axi4, TYPE = NON_HDL, VALUES = (axi4lite=axi4lite, axi4=axi4), BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PARAMETER C_AXI_CLK_PERIOD_PS = 10000, DT = INTEGER, IO_IS = clk_freq
PARAMETER C_NUM_BANKS_MEM = 1, DT = INTEGER, RANGE = (1:4), IO_IF = emc_0, IO_IS = C_NUM_BANKS_MEM
PARAMETER C_INCLUDE_NEGEDGE_IOREGS = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_INCLUDE_NEGEDGE_IOREGS
PARAMETER C_MEM0_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64), PERMIT = BASE_USER, DESC = Bank 0 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM0_WIDTH
PARAMETER C_MEM1_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64), PERMIT = BASE_USER, DESC = Bank 1 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM1_WIDTH
PARAMETER C_MEM2_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64), PERMIT = BASE_USER, DESC = Bank 2 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM2_WIDTH
PARAMETER C_MEM3_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64), PERMIT = BASE_USER, DESC = Bank 3 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM3_WIDTH
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_0 = 0, DT = INTEGER, RANGE = (0:1), DESC = Match data width of memory bank 0 with AXI data bus, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_0, VALUES = (0= FALSE , 1= TRUE ), PERMIT = BASE_USER
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_1 = 0, DT = INTEGER, RANGE = (0:1), DESC = Match data width of memory bank 1 with AXI data bus, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_1, VALUES = (0= FALSE , 1= TRUE ), PERMIT = BASE_USER
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_2 = 0, DT = INTEGER, RANGE = (0:1), DESC = Match data width of memory bank 2 with AXI data bus, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_2, VALUES = (0= FALSE , 1= TRUE ), PERMIT = BASE_USER
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_3 = 0, DT = INTEGER, RANGE = (0:1), DESC = Match data width of memory bank 3 with AXI data bus, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_3, VALUES = (0= FALSE , 1= TRUE ), PERMIT = BASE_USER
PARAMETER C_MEM0_TYPE = 0, DT = INTEGER, RANGE = (0:4), PERMIT = BASE_USER, DESC = Memory Type For Bank 0, IO_IF = emc_0, IO_IS = C_MEM0_TYPE, VALUES = (0= synchronous SRAM, 1= Asynchronous SRAM, 2= Linear Flash, 3= Page mode Flash, 4= PSRAM)
PARAMETER C_SYNCH_PIPEDELAY_0 = 2, DT = INTEGER, RANGE = (1:2), PERMIT = BASE_USER, DESC = Memory Bank 0 Pipeline Delay, IO_IF = emc_0, IO_IS = C_SYNCH_PIPEDELAY_0
PARAMETER C_PARITY_TYPE_MEM_0 = 0, DT = INTEGER, RANGE = (0:2), IO_IS = C_PARITY_TYPE_MEM_0, DESC = Parity Mode, VALUES = (0= Disable Parity, 1= Odd Parity, 2= Even Parity)
PARAMETER C_TCEDV_PS_MEM_0 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_0
PARAMETER C_TAVDV_PS_MEM_0 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_0
PARAMETER C_TPACC_PS_FLASH_0 = 25000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_PAGEMODE_PS_0
PARAMETER C_THZCE_PS_MEM_0 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_0
PARAMETER C_THZOE_PS_MEM_0 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_0
PARAMETER C_TWC_PS_MEM_0 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_0
PARAMETER C_TWP_PS_MEM_0 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_0
PARAMETER C_TWPH_PS_MEM_0 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_HIGH_OUT_FAST_PS_0
PARAMETER C_TLZWE_PS_MEM_0 = 0, DT = INTEGER, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_0
PARAMETER C_MEM1_TYPE = 0, DT = INTEGER, RANGE = (0:4), PERMIT = BASE_USER, DESC = Memory Type For Bank 1, IO_IF = emc_0, IO_IS = C_MEM1_TYPE, VALUES = (0= synchronous SRAM, 1= Asynchronous SRAM, 2= Linear Flash, 3= Page mode Flash, 4= PSRAM)
PARAMETER C_SYNCH_PIPEDELAY_1 = 2, DT = INTEGER, RANGE = (1:2), PERMIT = BASE_USER, DESC = Memory Bank 1 Pipeline Delay, IO_IF = emc_0, IO_IS = C_SYNCH_PIPEDELAY_1
PARAMETER C_PARITY_TYPE_MEM_1 = 0, DT = INTEGER, RANGE = (0:2), IO_IS = C_PARITY_TYPE_MEM_1, DESC = Parity Mode, VALUES = (0= Disable Parity, 1= Odd Parity, 2= Even Parity)
PARAMETER C_TCEDV_PS_MEM_1 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_1
PARAMETER C_TAVDV_PS_MEM_1 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_1
PARAMETER C_TPACC_PS_FLASH_1 = 25000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_PAGEMODE_PS_1
PARAMETER C_THZCE_PS_MEM_1 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_1
PARAMETER C_THZOE_PS_MEM_1 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_1
PARAMETER C_TWC_PS_MEM_1 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_1
PARAMETER C_TWP_PS_MEM_1 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_1
PARAMETER C_TWPH_PS_MEM_1 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_HIGH_OUT_FAST_PS_1
PARAMETER C_TLZWE_PS_MEM_1 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_1
PARAMETER C_MEM2_TYPE = 0, DT = INTEGER, RANGE = (0:4), PERMIT = BASE_USER, DESC = Memory Type For Bank 2, IO_IF = emc_0, IO_IS = C_MEM2_TYPE, VALUES = (0= synchronous SRAM, 1= Asynchronous SRAM, 2= Linear Flash, 3= Page mode Flash, 4= PSRAM)
PARAMETER C_SYNCH_PIPEDELAY_2 = 2, DT = INTEGER, RANGE = (1:2), PERMIT = BASE_USER, DESC = Memory Bank 2 Pipeline Delay, IO_IF = emc_0, IO_IS = C_SYNCH_PIPEDELAY_2
PARAMETER C_PARITY_TYPE_MEM_2 = 0, DT = INTEGER, RANGE = (0:2), IO_IS = C_PARITY_TYPE_MEM_2, DESC = Parity Mode, VALUES = (0= Disable Parity, 1= Odd Parity, 2= Even Parity)
PARAMETER C_TCEDV_PS_MEM_2 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_2
PARAMETER C_TAVDV_PS_MEM_2 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_2
PARAMETER C_TPACC_PS_FLASH_2 = 25000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_PAGEMODE_PS_2
PARAMETER C_THZCE_PS_MEM_2 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_2
PARAMETER C_THZOE_PS_MEM_2 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_2
PARAMETER C_TWC_PS_MEM_2 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_2
PARAMETER C_TWP_PS_MEM_2 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_2
PARAMETER C_TWPH_PS_MEM_2 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_HIGH_OUT_FAST_PS_2
PARAMETER C_TLZWE_PS_MEM_2 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_2
PARAMETER C_MEM3_TYPE = 0, DT = INTEGER, RANGE = (0:4), PERMIT = BASE_USER, DESC = Memory Type For Bank 3, IO_IF = emc_0, IO_IS = C_MEM3_TYPE, VALUES = (0= synchronous SRAM, 1= Asynchronous SRAM, 2= Linear Flash, 3= Page mode Flash, 4= PSRAM)
PARAMETER C_SYNCH_PIPEDELAY_3 = 2, DT = INTEGER, RANGE = (1:2), PERMIT = BASE_USER, DESC = Memory Bank 3 Pipeline Delay, IO_IF = emc_0, IO_IS = C_SYNCH_PIPEDELAY_3
PARAMETER C_PARITY_TYPE_MEM_3 = 0, DT = INTEGER, RANGE = (0:2), IO_IS = C_PARITY_TYPE_MEM_3, DESC = Parity Mode, VALUES = (0= Disable Parity, 1= Odd Parity, 2= Even Parity)
PARAMETER C_TCEDV_PS_MEM_3 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_3
PARAMETER C_TAVDV_PS_MEM_3 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_3
PARAMETER C_TPACC_PS_FLASH_3 = 25000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_PAGEMODE_PS_3
PARAMETER C_THZCE_PS_MEM_3 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_3
PARAMETER C_THZOE_PS_MEM_3 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_3
PARAMETER C_TWC_PS_MEM_3 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_3
PARAMETER C_TWP_PS_MEM_3 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_3
PARAMETER C_TWPH_PS_MEM_3 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_HIGH_OUT_FAST_PS_3
PARAMETER C_TLZWE_PS_MEM_3 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_3
PARAMETER C_MAX_MEM_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32, 64), PERMIT = BASE_USER, DESC = Maximum Data Width, IO_IF = emc_0, IO_IS = C_MAX_MEM_WIDTH
PARAMETER C_S_AXI_REG_BASEADDR = 0xffffffff, ADDRESS = BASE, DT = std_logic_vector(31 downto 0), BUS = S_AXI_REG, PAIR = C_S_AXI_REG_HIGHADDR, ISVALID = (C_S_AXI_EN_REG==1), IO_IS = C_S_AXI_REG_BASEADDR, PERMIT = BASE_USER, ADDR_TYPE = REGISTER, CACHEABLE = FALSE
PARAMETER C_S_AXI_REG_HIGHADDR = 0x00000000, ADDRESS = HIGH, DT = std_logic_vector(31 downto 0), BUS = S_AXI_REG, PAIR = C_S_AXI_REG_BASEADDR, ISVALID = (C_S_AXI_EN_REG==1), IO_IS = C_S_AXI_REG_HIGHADDR, PERMIT = BASE_USER
PARAMETER C_S_AXI_MEM0_BASEADDR = 0xffffffff, ADDRESS = BASE, DT = std_logic_vector(31 downto 0), BUS = S_AXI_MEM, PAIR = C_S_AXI_MEM0_HIGHADDR, IO_IS = C_S_AXI_MEM0_BASEADDR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=1)
PARAMETER C_S_AXI_MEM0_HIGHADDR = 0x00000000, ADDRESS = HIGH, DT = std_logic_vector(31 downto 0), BUS = S_AXI_MEM, PAIR = C_S_AXI_MEM0_BASEADDR, IO_IS = C_S_AXI_MEM0_HIGHADDR, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=1)
PARAMETER C_S_AXI_MEM1_BASEADDR = 0xffffffff, ADDRESS = BASE, DT = std_logic_vector(31 downto 0), BUS = S_AXI_MEM, PAIR = C_S_AXI_MEM1_HIGHADDR, IO_IS = C_S_AXI_MEM1_BASEADDR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=2)
PARAMETER C_S_AXI_MEM1_HIGHADDR = 0x00000000, ADDRESS = HIGH, DT = std_logic_vector(31 downto 0), BUS = S_AXI_MEM, PAIR = C_S_AXI_MEM1_BASEADDR, IO_IS = C_S_AXI_MEM1_HIGHADDR, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=2)
PARAMETER C_S_AXI_MEM2_BASEADDR = 0xffffffff, ADDRESS = BASE, DT = std_logic_vector(31 downto 0), BUS = S_AXI_MEM, PAIR = C_S_AXI_MEM2_HIGHADDR, IO_IS = C_S_AXI_MEM2_BASEADDR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=3)
PARAMETER C_S_AXI_MEM2_HIGHADDR = 0x00000000, ADDRESS = HIGH, DT = std_logic_vector(31 downto 0), BUS = S_AXI_MEM, PAIR = C_S_AXI_MEM2_BASEADDR, IO_IS = C_S_AXI_MEM2_HIGHADDR, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=3)
PARAMETER C_S_AXI_MEM3_BASEADDR = 0xffffffff, ADDRESS = BASE, DT = std_logic_vector(31 downto 0), BUS = S_AXI_MEM, PAIR = C_S_AXI_MEM3_HIGHADDR, IO_IS = C_S_AXI_MEM3_BASEADDR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=4)
PARAMETER C_S_AXI_MEM3_HIGHADDR = 0x00000000, ADDRESS = HIGH, DT = std_logic_vector(31 downto 0), BUS = S_AXI_MEM, PAIR = C_S_AXI_MEM3_BASEADDR, IO_IS = C_S_AXI_MEM3_HIGHADDR, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=4)

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI_MEM:S_AXI_REG, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = Rst, BUS = S_AXI_MEM:S_AXI_REG
PORT S_AXI_REG_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_REG_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_AWVALID = AWVALID, DIR = I, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_AWREADY = AWREADY, DIR = O, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_REG_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_REG_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_WVALID = WVALID, DIR = I, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_WREADY = WREADY, DIR = O, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_BVALID = BVALID, DIR = O, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_BREADY = BREADY, DIR = I, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_REG_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_ARVALID = ARVALID, DIR = I, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_ARREADY = ARREADY, DIR = O, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_REG_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_RVALID = RVALID, DIR = O, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_REG_RREADY = RREADY, DIR = I, BUS = S_AXI_REG, ISVALID = (C_S_AXI_EN_REG==1)
PORT S_AXI_MEM_AWLEN = AWLEN, DIR = I, VEC = [7:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_AWLOCK = AWLOCK, DIR = I, BUS = S_AXI_MEM
PORT S_AXI_MEM_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_WLAST = WLAST, DIR = I, BUS = S_AXI_MEM
PORT S_AXI_MEM_BID = BID, DIR = O, VEC = [(C_S_AXI_MEM_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_MEM
PORT S_AXI_MEM_ARID = ARID, DIR = I, VEC = [(C_S_AXI_MEM_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_MEM
PORT S_AXI_MEM_ARLEN = ARLEN, DIR = I, VEC = [7:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_ARLOCK = ARLOCK, DIR = I, BUS = S_AXI_MEM
PORT S_AXI_MEM_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_MEM, ENDIAN = LITTLE
PORT S_AXI_MEM_RID = RID, DIR = O, VEC = [(C_S_AXI_MEM_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_MEM
PORT S_AXI_MEM_RLAST = RLAST, DIR = O, BUS = S_AXI_MEM
PORT S_AXI_MEM_AWID = AWID, DIR = I, VEC = [(C_S_AXI_MEM_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_MEM
PORT S_AXI_MEM_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_MEM_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_MEM
PORT S_AXI_MEM_AWVALID = AWVALID, DIR = I, BUS = S_AXI_MEM
PORT S_AXI_MEM_AWREADY = AWREADY, DIR = O, BUS = S_AXI_MEM
PORT S_AXI_MEM_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_MEM_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_MEM
PORT S_AXI_MEM_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_MEM_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI_MEM
PORT S_AXI_MEM_WVALID = WVALID, DIR = I, BUS = S_AXI_MEM
PORT S_AXI_MEM_WREADY = WREADY, DIR = O, BUS = S_AXI_MEM
PORT S_AXI_MEM_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_MEM
PORT S_AXI_MEM_BVALID = BVALID, DIR = O, BUS = S_AXI_MEM
PORT S_AXI_MEM_BREADY = BREADY, DIR = I, BUS = S_AXI_MEM
PORT S_AXI_MEM_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_MEM_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_MEM
PORT S_AXI_MEM_ARVALID = ARVALID, DIR = I, BUS = S_AXI_MEM
PORT S_AXI_MEM_ARREADY = ARREADY, DIR = O, BUS = S_AXI_MEM
PORT S_AXI_MEM_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_MEM_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_MEM
PORT S_AXI_MEM_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_MEM
PORT S_AXI_MEM_RVALID = RVALID, DIR = O, BUS = S_AXI_MEM
PORT S_AXI_MEM_RREADY = RREADY, DIR = I, BUS = S_AXI_MEM
PORT RdClk = "", DIR = I, SIGIS = Clk, ASSIGNMENT = REQUIRE
PORT Mem_A = "", DIR = O, VEC = [(C_S_AXI_MEM_ADDR_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_addr, PERMIT = BASE_USER, DESC = 'Memory Address Bus'
PORT Mem_RPN = "", DIR = O, IO_IF = emc_0, IO_IS = emc_rst, PERMIT = BASE_USER, DESC = 'Memory Reset/Power Down'
PORT Mem_CE = "", DIR = O, VEC = [(C_NUM_BANKS_MEM-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_ce, PERMIT = BASE_USER, DESC = 'Memory Chip Enable Active High'
PORT Mem_CEN = "", DIR = O, VEC = [(C_NUM_BANKS_MEM-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_csn, PERMIT = BASE_USER, DESC = 'Memory Chip Enable Active Low'
PORT Mem_OEN = "", DIR = O, VEC = [(C_NUM_BANKS_MEM-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_oen, PERMIT = BASE_USER, DESC = 'Memory Output Enable'
PORT Mem_WEN = "", DIR = O, IO_IF = emc_0, IO_IS = emc_wen, PERMIT = BASE_USER, DESC = 'Memory Write Enable'
PORT Mem_QWEN = "", DIR = O, VEC = [((C_MAX_MEM_WIDTH/8)-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_qwen, PERMIT = BASE_USER, DESC = 'Memory Qualified Write Enable'
PORT Mem_BEN = "", DIR = O, VEC = [((C_MAX_MEM_WIDTH/8)-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_ben, PERMIT = BASE_USER, DESC = 'Memory Byte Enable'
PORT Mem_ADV_LDN = "", DIR = O, IO_IF = emc_0, IO_IS = emc_adv_ldn, PERMIT = BASE_USER, DESC = 'Memory Advanced Burst Address/Load New Address'
PORT Mem_LBON = "", DIR = O, IO_IF = emc_0, IO_IS = emc_lbon, PERMIT = BASE_USER, DESC = 'Memory Linear/Interleaved Burst Order'
PORT Mem_CKEN = "", DIR = O, IO_IF = emc_0, IO_IS = emc_cken, PERMIT = BASE_USER, DESC = 'Memory Clock Enable'
PORT Mem_RNW = "", DIR = O, IO_IF = emc_0, IO_IS = emc_rnw, PERMIT = BASE_USER, DESC = 'Memory Read Not Write'
PORT Mem_DQ_I = "", DIR = I, VEC = [(C_MAX_MEM_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_data_i
PORT Mem_DQ_O = "", DIR = O, VEC = [(C_MAX_MEM_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_data_o
PORT Mem_DQ_T = "", DIR = O, VEC = [(C_MAX_MEM_WIDTH-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_data_t
PORT MEM_DQ_PARITY_I = "", DIR = I, VEC = [((C_MAX_MEM_WIDTH/8)-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_data_parity_i
PORT MEM_DQ_PARITY_O = "", DIR = O, VEC = [((C_MAX_MEM_WIDTH/8)-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_data_parity_o
PORT MEM_DQ_PARITY_T = "", DIR = O, VEC = [((C_MAX_MEM_WIDTH/8)-1):0], ENDIAN = LITTLE, IO_IF = emc_0, IO_IS = emc_data_parity_t
PORT Mem_CRE = "", DIR = O, IO_IF = emc_0, IO_IS = emc_cre, ISVALID = (C_S_AXI_EN_REG==1), PERMIT = BASE_USER, DESC = 'Memory Clock Enable'
PORT Mem_DQ = "", TRI_I = Mem_DQ_I, TRI_O = Mem_DQ_O, TRI_T = Mem_DQ_T, DIR = IO, VEC = [(C_MAX_MEM_WIDTH-1):0], ENDIAN = LITTLE, THREE_STATE = TRUE, ENABLE = MULTI, PERMIT = BASE_USER, DESC = 'Memory Data Bus', IO_IF = emc_0, IO_IS = emc_data
PORT MEM_DQ_PARITY = "", TRI_I = MEM_DQ_PARITY_I, TRI_O = MEM_DQ_PARITY_O, TRI_T = MEM_DQ_PARITY_T, DIR = IO, VEC = [((C_MAX_MEM_WIDTH/8)-1):0], ENDIAN = LITTLE, THREE_STATE = TRUE, ENABLE = MULTI, PERMIT = BASE_USER, DESC = 'Memory Data Parity Bus', IO_IF = emc_0, IO_IS = emc_data_parity

END
