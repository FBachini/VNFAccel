#-- DISCLAIMER OF LIABILITY
#--
#-- This file contains proprietary and confidential information of
#-- Xilinx, Inc. ("Xilinx"), that is distributed under a license
#-- from Xilinx, and may be used, copied and/or disclosed only
#-- pursuant to the terms of a valid license agreement with Xilinx.
#--
#-- XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION
#-- ("MATERIALS") "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
#-- EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING WITHOUT
#-- LIMITATION, ANY WARRANTY WITH RESPECT TO NONINFRINGEMENT,
#-- MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. Xilinx
#-- does not warrant that functions included in the Materials will
#-- meet the requirements of Licensee, or that the operation of the
#-- Materials will be uninterrupted or error-free, or that defects
#-- in the Materials will be corrected. Furthermore, Xilinx does
#-- not warrant or make any representations regarding use, or the
#-- results of the use, of the Materials in terms of correctness,
#-- accuracy, reliability or otherwise.
#--
#-- Xilinx products are not designed or intended to be fail-safe,
#-- or for use in any application requiring fail-safe performance,
#-- such as life-support or safety devices or systems, Class III
#-- medical devices, nuclear facilities, applications related to
#-- the deployment of airbags, or any other applications that could
#-- lead to death, personal injury or severe property or
#-- environmental damage (individually and collectively, "critical
#-- applications"). Customer assumes the sole risk and liability
#-- of any use of Xilinx products in critical applications,
#-- subject only to applicable laws and regulations governing
#-- limitations on product liability.
#--
#-- Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
#--
#-- This disclaimer and copyright notice must be retained as part
#-- of this file at all times.
#--
###################################################################
##
## Name     : axi_interconnect
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_interconnect

## Peripheral Options
OPTION RUN_NGCBUILD = TRUE
#OPTION IMP_NETLIST = TRUE
OPTION IPTYPE = BUS
OPTION BUS_STD = AXI
OPTION STYLE = HDL
OPTION HDL = MIXED
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = platgen_update
OPTION MAX_MASTERS = 16
OPTION MAX_SLAVES = 16
OPTION DESC = AXI Interconnect
OPTION LONG_DESC = AXI4 Memory-Mapped Interconnect
OPTION IP_GROUP = Bus and Bridge:MICROBLAZE
#OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRE_PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRE_PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRE_PRODUCTION, kintex7=PRE_PRODUCTION)


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI_CTRL, BUS_TYPE = SLAVE, BUS_STD = AXI, ISVALID = (C_USE_CTRL_PORT != 0)

## Generics for VHDL or Parameters for Verilog
PARAMETER C_FAMILY = rtl, DT = STRING, TYPE = NON_HDL
PARAMETER C_BASEFAMILY = rtl, DT = STRING, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_basefamily
PARAMETER C_NUM_SLAVE_SLOTS = 1, DT = INTEGER, RANGE = (1 : 16), ASSIGNMENT = UPDATE
PARAMETER C_NUM_MASTER_SLOTS = 1, DT = INTEGER, RANGE = (1 : 16), ASSIGNMENT = UPDATE
PARAMETER C_AXI_ID_WIDTH = 1, DT = INTEGER, RANGE = (1 : 16), ASSIGNMENT = UPDATE
PARAMETER C_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), ASSIGNMENT = UPDATE
PARAMETER C_AXI_DATA_MAX_WIDTH = 32, DT = INTEGER, ASSIGNMENT = UPDATE, RANGE = (32, 64, 128, 256, 512, 1024)
PARAMETER C_S_AXI_DATA_WIDTH = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_DATA_WIDTH = 0x00000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020000000200000002000000020, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_INTERCONNECT_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32, 64, 128, 256, 512, 1024), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S_AXI_PROTOCOL = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_PROTOCOL = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_BASE_ADDR = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_HIGH_ADDR = 0x
PARAMETER C_S_AXI_BASE_ID = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_THREAD_ID_WIDTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_IS_INTERCONNECT = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_ACLK_RATIO = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_IS_ACLK_ASYNC = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_ACLK_RATIO = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_IS_ACLK_ASYNC = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_INTERCONNECT_ACLK_RATIO = 1, DT = INTEGER, RANGE = (1 : 2147483647), ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_SUPPORTS_WRITE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_SUPPORTS_READ = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_SUPPORTS_WRITE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_SUPPORTS_READ = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_AXI_SUPPORTS_USER_SIGNALS = 0, DT = INTEGER, RANGE = (1, 0), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_AXI_AWUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_AXI_ARUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_AXI_WUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_AXI_RUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_AXI_BUSER_WIDTH = 1, DT = INTEGER, RANGE = (1 : 256), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_AXI_CONNECTIVITY = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_SINGLE_THREAD = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_SUPPORTS_REORDERING = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_SUPPORTS_NARROW_BURST = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_WRITE_ACCEPTANCE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_READ_ACCEPTANCE = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_WRITE_ISSUING = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_READ_ISSUING = 0x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_ARB_PRIORITY = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_SECURE = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_WRITE_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_WRITE_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_WRITE_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_READ_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_READ_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_READ_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_WRITE_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_WRITE_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_WRITE_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_READ_FIFO_DEPTH = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_READ_FIFO_TYPE = 0b1111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_READ_FIFO_DELAY = 0b0000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_AW_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_AR_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_W_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_R_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_B_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_AW_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_AR_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_W_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_R_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_M_AXI_B_REGISTER = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_INTERCONNECT_R_REGISTER = 0, DT = INTEGER, RANGE = (0,8), VALUES = ( 0 = BYPASS, 8 = AUTOMATIC, 1 = FULLY_REGISTERED, 7 = LIGHT_WEIGHT)
PARAMETER C_INTERCONNECT_CONNECTIVITY_MODE = 1, DT = INTEGER, RANGE = (0,1), VALUES = (0= Shared Access (Area optimized) , 1= Crossbar (Performance optimized) ), DESC = Interconnect Architecture
PARAMETER C_USE_CTRL_PORT = 0, DT = INTEGER, RANGE = (1, 0), ASSIGNMENT = CONSTANT
PARAMETER C_USE_INTERRUPT = 1, DT = INTEGER, RANGE = (1, 0), ASSIGNMENT = CONSTANT
PARAMETER C_RANGE_CHECK = 2, DT = INTEGER, VALUES = (2 = AUTOMATIC, 0 = OFF, 1 = ON), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_range_check, DESC = Check for transaction errors (DECERR)
PARAMETER C_S_AXI_CTRL_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI_CTRL, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_CTRL_PORT != 0)
PARAMETER C_S_AXI_CTRL_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, RANGE = (32), ASSIGNMENT = CONSTANT, ISVALID = (C_USE_CTRL_PORT != 0)
PARAMETER C_S_AXI_CTRL_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, RANGE = (32), ASSIGNMENT = CONSTANT, ISVALID = (C_USE_CTRL_PORT != 0)
PARAMETER C_BASEADDR = 0xFFFFFFFF, BUS = S_AXI_CTRL, ADDRESS = BASE, PAIR = C_HIGHADDR, DT = STD_LOGIC_VECTOR, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_CTRL_PORT != 0)
PARAMETER C_HIGHADDR = 0x00000000, BUS = S_AXI_CTRL, ADDRESS = HIGH, PAIR = C_BASEADDR, DT = STD_LOGIC_VECTOR, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_CTRL_PORT != 0)
PARAMETER C_DEBUG = 0, DT = INTEGER, ASSIGNMENT = CONSTANT

## Ports
PORT INTERCONNECT_ACLK = "", DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE, BUS = S_AXI_CTRL
PORT INTERCONNECT_ARESETN = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESET_OUT_N = ARESETN, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0], SIGIS = RST
PORT M_AXI_ARESET_OUT_N = ARESETN, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0], SIGIS = RST
PORT IRQ = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_CTRL_PORT != 0)
PORT S_AXI_ACLK = ACLK, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0], SIGIS = CLK
PORT S_AXI_AWID = AWID, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH
PORT S_AXI_AWLEN = AWLEN, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*8)-1):0], CONTRIBUTION = 8
PORT S_AXI_AWSIZE = AWSIZE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3
PORT S_AXI_AWBURST = AWBURST, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT S_AXI_AWLOCK = AWLOCK, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT S_AXI_AWCACHE = AWCACHE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT S_AXI_AWPROT = AWPROT, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3
PORT S_AXI_AWQOS = AWQOS, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT S_AXI_AWUSER = AWUSER, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_AWUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_AWUSER_WIDTH
PORT S_AXI_AWVALID = AWVALID, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_AWREADY = AWREADY, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [(((C_NUM_SLAVE_SLOTS*C_AXI_DATA_MAX_WIDTH)/8)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH/8
PORT S_AXI_WLAST = WLAST, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_WUSER = WUSER, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_WUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_WUSER_WIDTH
PORT S_AXI_WVALID = WVALID, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_WREADY = WREADY, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_BID = BID, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT S_AXI_BUSER = BUSER, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_BUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_BUSER_WIDTH
PORT S_AXI_BVALID = BVALID, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_BREADY = BREADY, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_ARID = ARID, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH
PORT S_AXI_ARLEN = ARLEN, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*8)-1):0], CONTRIBUTION = 8
PORT S_AXI_ARSIZE = ARSIZE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3
PORT S_AXI_ARBURST = ARBURST, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT S_AXI_ARLOCK = ARLOCK, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT S_AXI_ARCACHE = ARCACHE, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT S_AXI_ARPROT = ARPROT, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*3)-1):0], CONTRIBUTION = 3
PORT S_AXI_ARQOS = ARQOS, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT S_AXI_ARUSER = ARUSER, DIR = I, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ARUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_ARUSER_WIDTH
PORT S_AXI_ARVALID = ARVALID, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_ARREADY = ARREADY, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_RID = RID, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT S_AXI_RLAST = RLAST, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_RUSER = RUSER, DIR = O, VEC = [((C_NUM_SLAVE_SLOTS*C_AXI_RUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_RUSER_WIDTH
PORT S_AXI_RVALID = RVALID, DIR = O, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT S_AXI_RREADY = RREADY, DIR = I, VEC = [(C_NUM_SLAVE_SLOTS-1):0]
PORT M_AXI_ACLK = ACLK, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0], SIGIS = CLK
PORT M_AXI_AWID = AWID, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH
PORT M_AXI_AWADDR = AWADDR, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH
PORT M_AXI_AWLEN = AWLEN, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*8)-1):0], CONTRIBUTION = 8
PORT M_AXI_AWSIZE = AWSIZE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3
PORT M_AXI_AWBURST = AWBURST, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT M_AXI_AWLOCK = AWLOCK, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT M_AXI_AWCACHE = AWCACHE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT M_AXI_AWPROT = AWPROT, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3
PORT M_AXI_AWREGION = AWREGION, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT M_AXI_AWQOS = AWQOS, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT M_AXI_AWUSER = AWUSER, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_AWUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_AWUSER_WIDTH
PORT M_AXI_AWVALID = AWVALID, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_AWREADY = AWREADY, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_WID = WID, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH
PORT M_AXI_WDATA = WDATA, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH
PORT M_AXI_WSTRB = WSTRB, DIR = O, VEC = [(((C_NUM_MASTER_SLOTS*C_AXI_DATA_MAX_WIDTH)/8)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH/8
PORT M_AXI_WLAST = WLAST, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_WUSER = WUSER, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_WUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_WUSER_WIDTH
PORT M_AXI_WVALID = WVALID, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_WREADY = WREADY, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_BID = BID, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH
PORT M_AXI_BRESP = BRESP, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT M_AXI_BUSER = BUSER, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_BUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_BUSER_WIDTH
PORT M_AXI_BVALID = BVALID, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_BREADY = BREADY, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_ARID = ARID, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH
PORT M_AXI_ARADDR = ARADDR, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ADDR_WIDTH)-1):0], CONTRIBUTION = C_AXI_ADDR_WIDTH
PORT M_AXI_ARLEN = ARLEN, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*8)-1):0], CONTRIBUTION = 8
PORT M_AXI_ARSIZE = ARSIZE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3
PORT M_AXI_ARBURST = ARBURST, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT M_AXI_ARLOCK = ARLOCK, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT M_AXI_ARCACHE = ARCACHE, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT M_AXI_ARPROT = ARPROT, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*3)-1):0], CONTRIBUTION = 3
PORT M_AXI_ARREGION = ARREGION, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT M_AXI_ARQOS = ARQOS, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*4)-1):0], CONTRIBUTION = 4
PORT M_AXI_ARUSER = ARUSER, DIR = O, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ARUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_ARUSER_WIDTH
PORT M_AXI_ARVALID = ARVALID, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_ARREADY = ARREADY, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_RID = RID, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_ID_WIDTH)-1):0], CONTRIBUTION = C_AXI_ID_WIDTH
PORT M_AXI_RDATA = RDATA, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_DATA_MAX_WIDTH)-1):0], CONTRIBUTION = C_AXI_DATA_MAX_WIDTH
PORT M_AXI_RRESP = RRESP, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*2)-1):0], CONTRIBUTION = 2
PORT M_AXI_RLAST = RLAST, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_RUSER = RUSER, DIR = I, VEC = [((C_NUM_MASTER_SLOTS*C_AXI_RUSER_WIDTH)-1):0], CONTRIBUTION = C_AXI_RUSER_WIDTH
PORT M_AXI_RVALID = RVALID, DIR = I, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT M_AXI_RREADY = RREADY, DIR = O, VEC = [(C_NUM_MASTER_SLOTS-1):0]
PORT S_AXI_CTRL_AWADDR = AWADDR, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH - 1) : 0]
PORT S_AXI_CTRL_AWVALID = AWVALID, DIR = I, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_AWREADY = AWREADY, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_WDATA = WDATA, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH - 1) : 0]
PORT S_AXI_CTRL_WVALID = WVALID, DIR = I, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_WREADY = WREADY, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_BRESP = BRESP, DIR = O, BUS = S_AXI_CTRL, VEC = [1 : 0]
PORT S_AXI_CTRL_BVALID = BVALID, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_BREADY = BREADY, DIR = I, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_ARADDR = ARADDR, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH - 1) : 0]
PORT S_AXI_CTRL_ARVALID = ARVALID, DIR = I, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_ARREADY = ARREADY, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_RDATA = RDATA, DIR = O, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH - 1) : 0]
PORT S_AXI_CTRL_RRESP = RRESP, DIR = O, BUS = S_AXI_CTRL, VEC = [1 : 0]
PORT S_AXI_CTRL_RVALID = RVALID, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_RREADY = RREADY, DIR = I, BUS = S_AXI_CTRL

END
